
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BE BOOLEAN_EXPRESSION CALL COMA COMPARISON CONSTANT CUBE ELSE ENDFOR ENDIF ENDWHILE EQUAL EQUAL_EQUAL FINISH FLOAT FOR GREATER_THAN GREATER_THAN_EQUAL ID IF INT LEFT_PARENTESIS LENGTH LENGTH_I LENGTH_J LENGTH_K LESS_THAN LESS_THAN_EQUAL MATHEMATICAL_CONSTANT MATHEMATICAL_EXPRESSION MATRIX MEAN MEDIAN MINUS MODE NOT NOT_EQUAL OR PLUS READ RETURN RIGHT_PARENTESIS ROUTINE RREF SEMICOLON SLASH STAR START STRING VECTOR WHILE WRITE\n    PROGRAMA : R START V B FINISH R\n    \n    V : BE VARIABLES SEMICOLON B V\n    |\n    \n    VARIABLES : FLOAT ID\n    | INT ID\n    | VECTOR ID LEFT_PARENTESIS CONSTANT RIGHT_PARENTESIS\n    | MATRIX ID LEFT_PARENTESIS CONSTANT COMA CONSTANT RIGHT_PARENTESIS\n    | CUBE ID LEFT_PARENTESIS CONSTANT COMA CONSTANT COMA CONSTANT RIGHT_PARENTESIS\n    \n    R : ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN R\n    |\n    \n    B : CALL ID SEMICOLON V B\n    | ID INDICES EQUAL E SEMICOLON V B\n    | READ ID SEMICOLON V B\n    | WRITE STRING WRITE_AUX SEMICOLON V B\n    | WRITE ID INDICES WRITE_AUX SEMICOLON V B\n    | IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B\n    | WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B\n    | FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B\n    |\n    \n    INDICES : LEFT_PARENTESIS E RIGHT_PARENTESIS\n    | LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS\n    | LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS\n    |\n    \n    ELSE_AUX : ELSE B\n    |\n    \n    WRITE_AUX : COMA STRING WRITE_AUX\n    | COMA ID INDICES WRITE_AUX\n    |\n    \n    EL : LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX\n    | CONSTANT EL_AUX\n    | ID EL_AUX\n    \n    EL_AUX : COMPARISON EL\n    |\n    \n    E : LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX\n    | CONSTANT E_AUX\n    | ID E_AUX\n    \n    E_AUX : PLUS E\n    | STAR E\n    | SLASH E\n    | MINUS E\n    |\n    '
    
_lr_action_items = {'ROUTINE':([0,24,90,],[3,3,3,]),'START':([0,2,90,112,],[-10,4,-10,-9,]),'$end':([1,24,41,90,112,],[0,-10,-1,-10,-9,]),'LEFT_PARENTESIS':([3,11,14,15,16,27,30,31,32,33,37,38,39,43,44,52,67,69,70,71,72,77,82,115,],[5,27,31,32,33,44,27,52,52,52,59,60,61,44,44,52,44,44,44,44,44,27,52,44,]),'BE':([4,23,34,42,48,58,63,74,75,84,86,91,92,99,100,103,113,117,119,124,127,129,130,132,137,138,141,142,143,145,146,],[7,7,-19,7,7,7,-19,-19,7,7,-2,-11,7,-13,-19,7,-19,-14,-19,7,-12,-15,7,7,-19,-19,-16,-17,7,-19,-18,]),'CALL':([4,6,23,34,40,42,48,58,63,74,75,80,84,85,86,91,92,99,100,103,107,113,117,119,122,124,127,129,130,132,133,137,138,141,142,143,145,146,],[-3,10,-3,10,10,-3,-3,-3,10,10,-3,10,-3,10,-2,-11,-3,-13,10,-3,10,10,-14,10,10,-3,-12,-15,-3,-3,10,10,10,-16,-17,-3,10,-18,]),'ID':([4,5,6,10,12,13,18,19,20,21,22,23,27,31,32,33,34,40,42,43,44,48,50,52,58,63,67,69,70,71,72,74,75,80,82,84,85,86,91,92,99,100,103,107,113,115,117,119,122,124,127,129,130,132,133,137,138,141,142,143,145,146,],[-3,8,11,25,28,30,35,36,37,38,39,-3,47,55,55,55,11,11,-3,47,47,-3,77,55,-3,11,47,47,47,47,47,11,-3,11,55,-3,11,-2,-11,-3,-13,11,-3,11,11,47,-14,11,11,-3,-12,-15,-3,-3,11,11,11,-16,-17,-3,11,-18,]),'READ':([4,6,23,34,40,42,48,58,63,74,75,80,84,85,86,91,92,99,100,103,107,113,117,119,122,124,127,129,130,132,133,137,138,141,142,143,145,146,],[-3,12,-3,12,12,-3,-3,-3,12,12,-3,12,-3,12,-2,-11,-3,-13,12,-3,12,12,-14,12,12,-3,-12,-15,-3,-3,12,12,12,-16,-17,-3,12,-18,]),'WRITE':([4,6,23,34,40,42,48,58,63,74,75,80,84,85,86,91,92,99,100,103,107,113,117,119,122,124,127,129,130,132,133,137,138,141,142,143,145,146,],[-3,13,-3,13,13,-3,-3,-3,13,13,-3,13,-3,13,-2,-11,-3,-13,13,-3,13,13,-14,13,13,-3,-12,-15,-3,-3,13,13,13,-16,-17,-3,13,-18,]),'IF':([4,6,23,34,40,42,48,58,63,74,75,80,84,85,86,91,92,99,100,103,107,113,117,119,122,124,127,129,130,132,133,137,138,141,142,143,145,146,],[-3,14,-3,14,14,-3,-3,-3,14,14,-3,14,-3,14,-2,-11,-3,-13,14,-3,14,14,-14,14,14,-3,-12,-15,-3,-3,14,14,14,-16,-17,-3,14,-18,]),'WHILE':([4,6,23,34,40,42,48,58,63,74,75,80,84,85,86,91,92,99,100,103,107,113,117,119,122,124,127,129,130,132,133,137,138,141,142,143,145,146,],[-3,15,-3,15,15,-3,-3,-3,15,15,-3,15,-3,15,-2,-11,-3,-13,15,-3,15,15,-14,15,15,-3,-12,-15,-3,-3,15,15,15,-16,-17,-3,15,-18,]),'FOR':([4,6,23,34,40,42,48,58,63,74,75,80,84,85,86,91,92,99,100,103,107,113,117,119,122,124,127,129,130,132,133,137,138,141,142,143,145,146,],[-3,16,-3,16,16,-3,-3,-3,16,16,-3,16,-3,16,-2,-11,-3,-13,16,-3,16,16,-14,16,16,-3,-12,-15,-3,-3,16,16,16,-16,-17,-3,16,-18,]),'FINISH':([4,6,9,34,42,48,58,63,74,75,86,91,92,99,100,103,113,117,119,127,129,130,132,137,138,141,142,143,145,146,],[-3,-19,24,-19,-3,-3,-3,-19,-19,-3,-2,-11,-3,-13,-19,-3,-19,-14,-19,-12,-15,-3,-3,-19,-19,-16,-17,-3,-19,-18,]),'FLOAT':([7,],[18,]),'INT':([7,],[19,]),'VECTOR':([7,],[20,]),'MATRIX':([7,],[21,]),'CUBE':([7,],[22,]),'RIGHT_PARENTESIS':([8,34,42,45,46,47,48,53,54,55,56,58,63,65,68,73,74,75,79,81,83,85,86,87,91,92,93,94,95,96,97,98,99,100,103,104,106,108,113,114,117,119,120,125,127,128,129,130,132,137,138,140,141,142,143,145,146,],[23,-19,-3,66,-41,-41,-3,80,-33,-33,84,-3,-19,93,-35,-36,-19,-3,104,-30,-31,-19,-2,109,-11,-3,-41,116,-37,-38,-39,-40,-13,-19,-3,-33,-32,124,-19,-34,-14,-19,-29,134,-12,136,-15,-3,-3,-19,-19,144,-16,-17,-3,-19,-18,]),'EQUAL':([11,26,66,116,136,],[-23,43,-20,-21,-22,]),'STRING':([13,50,],[29,76,]),'SEMICOLON':([17,25,28,29,30,35,36,46,47,49,51,64,66,68,73,76,77,78,93,95,96,97,98,101,102,109,114,116,118,134,136,144,],[34,42,48,-28,-23,-4,-5,-41,-41,75,-28,92,-20,-35,-36,-28,-23,103,-41,-37,-38,-39,-40,-26,-28,-6,-34,-21,-27,-7,-22,-8,]),'RETURN':([23,34,40,42,48,58,62,63,74,75,86,91,92,99,100,103,113,117,119,127,129,130,132,137,138,141,142,143,145,146,],[-3,-19,-19,-3,-3,-3,90,-19,-19,-3,-2,-11,-3,-13,-19,-3,-19,-14,-19,-12,-15,-3,-3,-19,-19,-16,-17,-3,-19,-18,]),'CONSTANT':([27,31,32,33,43,44,52,59,60,61,67,69,70,71,72,82,110,111,115,135,],[46,54,54,54,46,46,54,87,88,89,46,46,46,46,46,54,125,126,46,140,]),'COMA':([29,30,45,46,47,51,54,55,57,66,68,73,76,77,81,83,88,89,93,94,95,96,97,98,102,104,106,114,116,120,126,136,],[50,-23,67,-41,-41,50,-33,-33,85,-20,-35,-36,50,-23,-30,-31,110,111,-41,115,-37,-38,-39,-40,50,-33,-32,-34,-21,-29,135,-22,]),'ELSE':([34,42,48,58,63,74,75,80,86,91,92,99,100,103,105,113,117,119,127,129,130,132,137,138,141,142,143,145,146,],[-19,-3,-3,-3,-19,-19,-3,-19,-2,-11,-3,-13,-19,-3,122,-19,-14,-19,-12,-15,-3,-3,-19,-19,-16,-17,-3,-19,-18,]),'ENDIF':([34,42,48,58,63,74,75,80,86,91,92,99,100,103,105,113,117,119,121,122,127,129,130,131,132,137,138,141,142,143,145,146,],[-19,-3,-3,-3,-19,-19,-3,-19,-2,-11,-3,-13,-19,-3,-25,-19,-14,-19,130,-19,-12,-15,-3,-24,-3,-19,-19,-16,-17,-3,-19,-18,]),'ENDWHILE':([34,42,48,58,63,74,75,84,86,91,92,99,100,103,107,113,117,119,123,127,129,130,132,137,138,141,142,143,145,146,],[-19,-3,-3,-3,-19,-19,-3,-3,-2,-11,-3,-13,-19,-3,-19,-19,-14,-19,132,-12,-15,-3,-3,-19,-19,-16,-17,-3,-19,-18,]),'ENDFOR':([34,42,48,58,63,74,75,86,91,92,99,100,103,113,117,119,124,127,129,130,132,133,137,138,139,141,142,143,145,146,],[-19,-3,-3,-3,-19,-19,-3,-2,-11,-3,-13,-19,-3,-19,-14,-19,-3,-12,-15,-3,-3,-19,-19,-19,143,-16,-17,-3,-19,-18,]),'PLUS':([46,47,93,],[69,69,69,]),'STAR':([46,47,93,],[70,70,70,]),'SLASH':([46,47,93,],[71,71,71,]),'MINUS':([46,47,93,],[72,72,72,]),'COMPARISON':([54,55,104,],[82,82,82,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAMA':([0,],[1,]),'R':([0,24,90,],[2,41,112,]),'V':([4,23,42,48,58,75,84,92,103,124,130,132,143,],[6,40,63,74,86,100,107,113,119,133,137,138,145,]),'B':([6,34,40,63,74,80,85,100,107,113,119,122,133,137,138,145,],[9,58,62,91,99,105,108,117,123,127,129,131,139,141,142,146,]),'VARIABLES':([7,],[17,]),'INDICES':([11,30,77,],[26,51,102,]),'E':([27,43,44,67,69,70,71,72,115,],[45,64,65,94,95,96,97,98,128,]),'WRITE_AUX':([29,51,76,102,],[49,78,101,118,]),'EL':([31,32,33,52,82,],[53,56,57,79,106,]),'E_AUX':([46,47,93,],[68,73,114,]),'EL_AUX':([54,55,104,],[81,83,120,]),'ELSE_AUX':([105,],[121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAMA","S'",1,None,None,None),
  ('PROGRAMA -> R START V B FINISH R','PROGRAMA',6,'p_PROGRAMA','TA.py',113),
  ('V -> BE VARIABLES SEMICOLON B V','V',5,'p_V','TA.py',118),
  ('V -> <empty>','V',0,'p_V','TA.py',119),
  ('VARIABLES -> FLOAT ID','VARIABLES',2,'p_VARIABLES','TA.py',124),
  ('VARIABLES -> INT ID','VARIABLES',2,'p_VARIABLES','TA.py',125),
  ('VARIABLES -> VECTOR ID LEFT_PARENTESIS CONSTANT RIGHT_PARENTESIS','VARIABLES',5,'p_VARIABLES','TA.py',126),
  ('VARIABLES -> MATRIX ID LEFT_PARENTESIS CONSTANT COMA CONSTANT RIGHT_PARENTESIS','VARIABLES',7,'p_VARIABLES','TA.py',127),
  ('VARIABLES -> CUBE ID LEFT_PARENTESIS CONSTANT COMA CONSTANT COMA CONSTANT RIGHT_PARENTESIS','VARIABLES',9,'p_VARIABLES','TA.py',128),
  ('R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN R','R',8,'p_R','TA.py',133),
  ('R -> <empty>','R',0,'p_R','TA.py',134),
  ('B -> CALL ID SEMICOLON V B','B',5,'p_B','TA.py',139),
  ('B -> ID INDICES EQUAL E SEMICOLON V B','B',7,'p_B','TA.py',140),
  ('B -> READ ID SEMICOLON V B','B',5,'p_B','TA.py',141),
  ('B -> WRITE STRING WRITE_AUX SEMICOLON V B','B',6,'p_B','TA.py',142),
  ('B -> WRITE ID INDICES WRITE_AUX SEMICOLON V B','B',7,'p_B','TA.py',143),
  ('B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B','B',9,'p_B','TA.py',144),
  ('B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B','B',9,'p_B','TA.py',145),
  ('B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B','B',11,'p_B','TA.py',146),
  ('B -> <empty>','B',0,'p_B','TA.py',147),
  ('INDICES -> LEFT_PARENTESIS E RIGHT_PARENTESIS','INDICES',3,'p_INDICES','TA.py',152),
  ('INDICES -> LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS','INDICES',5,'p_INDICES','TA.py',153),
  ('INDICES -> LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS','INDICES',7,'p_INDICES','TA.py',154),
  ('INDICES -> <empty>','INDICES',0,'p_INDICES','TA.py',155),
  ('ELSE_AUX -> ELSE B','ELSE_AUX',2,'p_ELSE_AUX','TA.py',160),
  ('ELSE_AUX -> <empty>','ELSE_AUX',0,'p_ELSE_AUX','TA.py',161),
  ('WRITE_AUX -> COMA STRING WRITE_AUX','WRITE_AUX',3,'p_WRITE_AUX','TA.py',166),
  ('WRITE_AUX -> COMA ID INDICES WRITE_AUX','WRITE_AUX',4,'p_WRITE_AUX','TA.py',167),
  ('WRITE_AUX -> <empty>','WRITE_AUX',0,'p_WRITE_AUX','TA.py',168),
  ('EL -> LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX','EL',4,'p_EL','TA.py',173),
  ('EL -> CONSTANT EL_AUX','EL',2,'p_EL','TA.py',174),
  ('EL -> ID EL_AUX','EL',2,'p_EL','TA.py',175),
  ('EL_AUX -> COMPARISON EL','EL_AUX',2,'p_EL_AUX','TA.py',180),
  ('EL_AUX -> <empty>','EL_AUX',0,'p_EL_AUX','TA.py',181),
  ('E -> LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX','E',4,'p_E','TA.py',186),
  ('E -> CONSTANT E_AUX','E',2,'p_E','TA.py',187),
  ('E -> ID E_AUX','E',2,'p_E','TA.py',188),
  ('E_AUX -> PLUS E','E_AUX',2,'p_E_AUX','TA.py',193),
  ('E_AUX -> STAR E','E_AUX',2,'p_E_AUX','TA.py',194),
  ('E_AUX -> SLASH E','E_AUX',2,'p_E_AUX','TA.py',195),
  ('E_AUX -> MINUS E','E_AUX',2,'p_E_AUX','TA.py',196),
  ('E_AUX -> <empty>','E_AUX',0,'p_E_AUX','TA.py',197),
]
