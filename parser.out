Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BOOLEAN_EXPRESSION
    EQUAL_EQUAL
    GREATER_THAN
    GREATER_THAN_EQUAL
    LENGTH
    LENGTH_I
    LENGTH_J
    LENGTH_K
    LESS_THAN
    LESS_THAN_EQUAL
    MATHEMATICAL_CONSTANT
    MATHEMATICAL_EXPRESSION
    MEAN
    MEDIAN
    MODE
    NOT
    NOT_EQUAL
    OR
    RREF

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> R START V B FINISH R
Rule 2     V -> BE VARIABLES SEMICOLON B V
Rule 3     V -> <empty>
Rule 4     VARIABLES -> FLOAT ID
Rule 5     VARIABLES -> INT ID
Rule 6     VARIABLES -> VECTOR ID LEFT_PARENTESIS CONSTANT RIGHT_PARENTESIS
Rule 7     VARIABLES -> MATRIX ID LEFT_PARENTESIS CONSTANT COMA CONSTANT RIGHT_PARENTESIS
Rule 8     VARIABLES -> CUBE ID LEFT_PARENTESIS CONSTANT COMA CONSTANT COMA CONSTANT RIGHT_PARENTESIS
Rule 9     R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN R
Rule 10    R -> <empty>
Rule 11    B -> CALL ID SEMICOLON V B
Rule 12    B -> ID INDICES EQUAL E SEMICOLON V B
Rule 13    B -> READ ID SEMICOLON V B
Rule 14    B -> WRITE STRING WRITE_AUX SEMICOLON V B
Rule 15    B -> WRITE ID INDICES WRITE_AUX SEMICOLON V B
Rule 16    B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
Rule 17    B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
Rule 18    B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
Rule 19    B -> <empty>
Rule 20    INDICES -> LEFT_PARENTESIS E RIGHT_PARENTESIS
Rule 21    INDICES -> LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS
Rule 22    INDICES -> LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS
Rule 23    INDICES -> <empty>
Rule 24    ELSE_AUX -> ELSE B
Rule 25    ELSE_AUX -> <empty>
Rule 26    WRITE_AUX -> COMA STRING WRITE_AUX
Rule 27    WRITE_AUX -> COMA ID INDICES WRITE_AUX
Rule 28    WRITE_AUX -> <empty>
Rule 29    EL -> LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX
Rule 30    EL -> CONSTANT EL_AUX
Rule 31    EL -> ID EL_AUX
Rule 32    EL_AUX -> COMPARISON EL
Rule 33    EL_AUX -> <empty>
Rule 34    E -> LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
Rule 35    E -> CONSTANT E_AUX
Rule 36    E -> ID E_AUX
Rule 37    E_AUX -> PLUS E
Rule 38    E_AUX -> STAR E
Rule 39    E_AUX -> SLASH E
Rule 40    E_AUX -> MINUS E
Rule 41    E_AUX -> <empty>

Terminals, with rules where they appear

AND                  : 
BE                   : 2
BOOLEAN_EXPRESSION   : 
CALL                 : 11
COMA                 : 7 8 8 18 21 22 22 26 27
COMPARISON           : 32
CONSTANT             : 6 7 7 8 8 8 30 35
CUBE                 : 8
ELSE                 : 24
ENDFOR               : 18
ENDIF                : 16
ENDWHILE             : 17
EQUAL                : 12
EQUAL_EQUAL          : 
FINISH               : 1
FLOAT                : 4
FOR                  : 18
GREATER_THAN         : 
GREATER_THAN_EQUAL   : 
ID                   : 4 5 6 7 8 9 11 12 13 15 27 31 36
IF                   : 16
INT                  : 5
LEFT_PARENTESIS      : 6 7 8 9 16 17 18 20 21 22 29 34
LENGTH               : 
LENGTH_I             : 
LENGTH_J             : 
LENGTH_K             : 
LESS_THAN            : 
LESS_THAN_EQUAL      : 
MATHEMATICAL_CONSTANT : 
MATHEMATICAL_EXPRESSION : 
MATRIX               : 7
MEAN                 : 
MEDIAN               : 
MINUS                : 40
MODE                 : 
NOT                  : 
NOT_EQUAL            : 
OR                   : 
PLUS                 : 37
READ                 : 13
RETURN               : 9
RIGHT_PARENTESIS     : 6 7 8 9 16 17 18 20 21 22 29 34
ROUTINE              : 9
RREF                 : 
SEMICOLON            : 2 11 12 13 14 15
SLASH                : 39
STAR                 : 38
START                : 1
STRING               : 14 26
VECTOR               : 6
WHILE                : 17
WRITE                : 14 15
error                : 

Nonterminals, with rules where they appear

B                    : 1 2 9 11 12 13 14 15 16 16 17 17 18 18 18 24
E                    : 12 20 21 21 22 22 22 34 37 38 39 40
EL                   : 16 17 18 29 32
ELSE_AUX             : 16
EL_AUX               : 29 30 31
E_AUX                : 34 35 36
INDICES              : 12 15 27
PROGRAMA             : 0
R                    : 1 1 9
V                    : 1 2 9 11 12 13 14 15 16 17 17 18 18
VARIABLES            : 2
WRITE_AUX            : 14 15 26 27

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . R START V B FINISH R
    (9) R -> . ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN R
    (10) R -> .

    ROUTINE         shift and go to state 3
    START           reduce using rule 10 (R -> .)

    PROGRAMA                       shift and go to state 1
    R                              shift and go to state 2

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> R . START V B FINISH R

    START           shift and go to state 4


state 3

    (9) R -> ROUTINE . LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN R

    LEFT_PARENTESIS shift and go to state 5


state 4

    (1) PROGRAMA -> R START . V B FINISH R
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)

    V                              shift and go to state 6

state 5

    (9) R -> ROUTINE LEFT_PARENTESIS . ID RIGHT_PARENTESIS V B RETURN R

    ID              shift and go to state 8


state 6

    (1) PROGRAMA -> R START V . B FINISH R
    (11) B -> . CALL ID SEMICOLON V B
    (12) B -> . ID INDICES EQUAL E SEMICOLON V B
    (13) B -> . READ ID SEMICOLON V B
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (15) B -> . WRITE ID INDICES WRITE_AUX SEMICOLON V B
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (19) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    FINISH          reduce using rule 19 (B -> .)

    B                              shift and go to state 9

state 7

    (2) V -> BE . VARIABLES SEMICOLON B V
    (4) VARIABLES -> . FLOAT ID
    (5) VARIABLES -> . INT ID
    (6) VARIABLES -> . VECTOR ID LEFT_PARENTESIS CONSTANT RIGHT_PARENTESIS
    (7) VARIABLES -> . MATRIX ID LEFT_PARENTESIS CONSTANT COMA CONSTANT RIGHT_PARENTESIS
    (8) VARIABLES -> . CUBE ID LEFT_PARENTESIS CONSTANT COMA CONSTANT COMA CONSTANT RIGHT_PARENTESIS

    FLOAT           shift and go to state 18
    INT             shift and go to state 19
    VECTOR          shift and go to state 20
    MATRIX          shift and go to state 21
    CUBE            shift and go to state 22

    VARIABLES                      shift and go to state 17

state 8

    (9) R -> ROUTINE LEFT_PARENTESIS ID . RIGHT_PARENTESIS V B RETURN R

    RIGHT_PARENTESIS shift and go to state 23


state 9

    (1) PROGRAMA -> R START V B . FINISH R

    FINISH          shift and go to state 24


state 10

    (11) B -> CALL . ID SEMICOLON V B

    ID              shift and go to state 25


state 11

    (12) B -> ID . INDICES EQUAL E SEMICOLON V B
    (20) INDICES -> . LEFT_PARENTESIS E RIGHT_PARENTESIS
    (21) INDICES -> . LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS
    (22) INDICES -> . LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS
    (23) INDICES -> .

    LEFT_PARENTESIS shift and go to state 27
    EQUAL           reduce using rule 23 (INDICES -> .)

    INDICES                        shift and go to state 26

state 12

    (13) B -> READ . ID SEMICOLON V B

    ID              shift and go to state 28


state 13

    (14) B -> WRITE . STRING WRITE_AUX SEMICOLON V B
    (15) B -> WRITE . ID INDICES WRITE_AUX SEMICOLON V B

    STRING          shift and go to state 29
    ID              shift and go to state 30


state 14

    (16) B -> IF . LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B

    LEFT_PARENTESIS shift and go to state 31


state 15

    (17) B -> WHILE . LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B

    LEFT_PARENTESIS shift and go to state 32


state 16

    (18) B -> FOR . LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B

    LEFT_PARENTESIS shift and go to state 33


state 17

    (2) V -> BE VARIABLES . SEMICOLON B V

    SEMICOLON       shift and go to state 34


state 18

    (4) VARIABLES -> FLOAT . ID

    ID              shift and go to state 35


state 19

    (5) VARIABLES -> INT . ID

    ID              shift and go to state 36


state 20

    (6) VARIABLES -> VECTOR . ID LEFT_PARENTESIS CONSTANT RIGHT_PARENTESIS

    ID              shift and go to state 37


state 21

    (7) VARIABLES -> MATRIX . ID LEFT_PARENTESIS CONSTANT COMA CONSTANT RIGHT_PARENTESIS

    ID              shift and go to state 38


state 22

    (8) VARIABLES -> CUBE . ID LEFT_PARENTESIS CONSTANT COMA CONSTANT COMA CONSTANT RIGHT_PARENTESIS

    ID              shift and go to state 39


state 23

    (9) R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS . V B RETURN R
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)

    V                              shift and go to state 40

state 24

    (1) PROGRAMA -> R START V B FINISH . R
    (9) R -> . ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN R
    (10) R -> .

    ROUTINE         shift and go to state 3
    $end            reduce using rule 10 (R -> .)

    R                              shift and go to state 41

state 25

    (11) B -> CALL ID . SEMICOLON V B

    SEMICOLON       shift and go to state 42


state 26

    (12) B -> ID INDICES . EQUAL E SEMICOLON V B

    EQUAL           shift and go to state 43


state 27

    (20) INDICES -> LEFT_PARENTESIS . E RIGHT_PARENTESIS
    (21) INDICES -> LEFT_PARENTESIS . E COMA E RIGHT_PARENTESIS
    (22) INDICES -> LEFT_PARENTESIS . E COMA E COMA E RIGHT_PARENTESIS
    (34) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (35) E -> . CONSTANT E_AUX
    (36) E -> . ID E_AUX

    LEFT_PARENTESIS shift and go to state 44
    CONSTANT        shift and go to state 46
    ID              shift and go to state 47

    E                              shift and go to state 45

state 28

    (13) B -> READ ID . SEMICOLON V B

    SEMICOLON       shift and go to state 48


state 29

    (14) B -> WRITE STRING . WRITE_AUX SEMICOLON V B
    (26) WRITE_AUX -> . COMA STRING WRITE_AUX
    (27) WRITE_AUX -> . COMA ID INDICES WRITE_AUX
    (28) WRITE_AUX -> .

    COMA            shift and go to state 50
    SEMICOLON       reduce using rule 28 (WRITE_AUX -> .)

    WRITE_AUX                      shift and go to state 49

state 30

    (15) B -> WRITE ID . INDICES WRITE_AUX SEMICOLON V B
    (20) INDICES -> . LEFT_PARENTESIS E RIGHT_PARENTESIS
    (21) INDICES -> . LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS
    (22) INDICES -> . LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS
    (23) INDICES -> .

    LEFT_PARENTESIS shift and go to state 27
    COMA            reduce using rule 23 (INDICES -> .)
    SEMICOLON       reduce using rule 23 (INDICES -> .)

    INDICES                        shift and go to state 51

state 31

    (16) B -> IF LEFT_PARENTESIS . EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (29) EL -> . LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX
    (30) EL -> . CONSTANT EL_AUX
    (31) EL -> . ID EL_AUX

    LEFT_PARENTESIS shift and go to state 52
    CONSTANT        shift and go to state 54
    ID              shift and go to state 55

    EL                             shift and go to state 53

state 32

    (17) B -> WHILE LEFT_PARENTESIS . EL RIGHT_PARENTESIS V B ENDWHILE V B
    (29) EL -> . LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX
    (30) EL -> . CONSTANT EL_AUX
    (31) EL -> . ID EL_AUX

    LEFT_PARENTESIS shift and go to state 52
    CONSTANT        shift and go to state 54
    ID              shift and go to state 55

    EL                             shift and go to state 56

state 33

    (18) B -> FOR LEFT_PARENTESIS . EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (29) EL -> . LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX
    (30) EL -> . CONSTANT EL_AUX
    (31) EL -> . ID EL_AUX

    LEFT_PARENTESIS shift and go to state 52
    CONSTANT        shift and go to state 54
    ID              shift and go to state 55

    EL                             shift and go to state 57

state 34

    (2) V -> BE VARIABLES SEMICOLON . B V
    (11) B -> . CALL ID SEMICOLON V B
    (12) B -> . ID INDICES EQUAL E SEMICOLON V B
    (13) B -> . READ ID SEMICOLON V B
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (15) B -> . WRITE ID INDICES WRITE_AUX SEMICOLON V B
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (19) B -> .

  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    BE              reduce using rule 19 (B -> .)
    FINISH          reduce using rule 19 (B -> .)
    RETURN          reduce using rule 19 (B -> .)
    ELSE            reduce using rule 19 (B -> .)
    ENDIF           reduce using rule 19 (B -> .)
    RIGHT_PARENTESIS reduce using rule 19 (B -> .)
    ENDWHILE        reduce using rule 19 (B -> .)
    ENDFOR          reduce using rule 19 (B -> .)

  ! CALL            [ reduce using rule 19 (B -> .) ]
  ! ID              [ reduce using rule 19 (B -> .) ]
  ! READ            [ reduce using rule 19 (B -> .) ]
  ! WRITE           [ reduce using rule 19 (B -> .) ]
  ! IF              [ reduce using rule 19 (B -> .) ]
  ! WHILE           [ reduce using rule 19 (B -> .) ]
  ! FOR             [ reduce using rule 19 (B -> .) ]

    B                              shift and go to state 58

state 35

    (4) VARIABLES -> FLOAT ID .

    SEMICOLON       reduce using rule 4 (VARIABLES -> FLOAT ID .)


state 36

    (5) VARIABLES -> INT ID .

    SEMICOLON       reduce using rule 5 (VARIABLES -> INT ID .)


state 37

    (6) VARIABLES -> VECTOR ID . LEFT_PARENTESIS CONSTANT RIGHT_PARENTESIS

    LEFT_PARENTESIS shift and go to state 59


state 38

    (7) VARIABLES -> MATRIX ID . LEFT_PARENTESIS CONSTANT COMA CONSTANT RIGHT_PARENTESIS

    LEFT_PARENTESIS shift and go to state 60


state 39

    (8) VARIABLES -> CUBE ID . LEFT_PARENTESIS CONSTANT COMA CONSTANT COMA CONSTANT RIGHT_PARENTESIS

    LEFT_PARENTESIS shift and go to state 61


state 40

    (9) R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V . B RETURN R
    (11) B -> . CALL ID SEMICOLON V B
    (12) B -> . ID INDICES EQUAL E SEMICOLON V B
    (13) B -> . READ ID SEMICOLON V B
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (15) B -> . WRITE ID INDICES WRITE_AUX SEMICOLON V B
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (19) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    RETURN          reduce using rule 19 (B -> .)

    B                              shift and go to state 62

state 41

    (1) PROGRAMA -> R START V B FINISH R .

    $end            reduce using rule 1 (PROGRAMA -> R START V B FINISH R .)


state 42

    (11) B -> CALL ID SEMICOLON . V B
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

  ! shift/reduce conflict for BE resolved as shift
    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)
    ELSE            reduce using rule 3 (V -> .)
    ENDIF           reduce using rule 3 (V -> .)
    RIGHT_PARENTESIS reduce using rule 3 (V -> .)
    ENDWHILE        reduce using rule 3 (V -> .)
    ENDFOR          reduce using rule 3 (V -> .)

  ! BE              [ reduce using rule 3 (V -> .) ]

    V                              shift and go to state 63

state 43

    (12) B -> ID INDICES EQUAL . E SEMICOLON V B
    (34) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (35) E -> . CONSTANT E_AUX
    (36) E -> . ID E_AUX

    LEFT_PARENTESIS shift and go to state 44
    CONSTANT        shift and go to state 46
    ID              shift and go to state 47

    E                              shift and go to state 64

state 44

    (34) E -> LEFT_PARENTESIS . E RIGHT_PARENTESIS E_AUX
    (34) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (35) E -> . CONSTANT E_AUX
    (36) E -> . ID E_AUX

    LEFT_PARENTESIS shift and go to state 44
    CONSTANT        shift and go to state 46
    ID              shift and go to state 47

    E                              shift and go to state 65

state 45

    (20) INDICES -> LEFT_PARENTESIS E . RIGHT_PARENTESIS
    (21) INDICES -> LEFT_PARENTESIS E . COMA E RIGHT_PARENTESIS
    (22) INDICES -> LEFT_PARENTESIS E . COMA E COMA E RIGHT_PARENTESIS

    RIGHT_PARENTESIS shift and go to state 66
    COMA            shift and go to state 67


state 46

    (35) E -> CONSTANT . E_AUX
    (37) E_AUX -> . PLUS E
    (38) E_AUX -> . STAR E
    (39) E_AUX -> . SLASH E
    (40) E_AUX -> . MINUS E
    (41) E_AUX -> .

    PLUS            shift and go to state 69
    STAR            shift and go to state 70
    SLASH           shift and go to state 71
    MINUS           shift and go to state 72
    RIGHT_PARENTESIS reduce using rule 41 (E_AUX -> .)
    COMA            reduce using rule 41 (E_AUX -> .)
    SEMICOLON       reduce using rule 41 (E_AUX -> .)

    E_AUX                          shift and go to state 68

state 47

    (36) E -> ID . E_AUX
    (37) E_AUX -> . PLUS E
    (38) E_AUX -> . STAR E
    (39) E_AUX -> . SLASH E
    (40) E_AUX -> . MINUS E
    (41) E_AUX -> .

    PLUS            shift and go to state 69
    STAR            shift and go to state 70
    SLASH           shift and go to state 71
    MINUS           shift and go to state 72
    RIGHT_PARENTESIS reduce using rule 41 (E_AUX -> .)
    COMA            reduce using rule 41 (E_AUX -> .)
    SEMICOLON       reduce using rule 41 (E_AUX -> .)

    E_AUX                          shift and go to state 73

state 48

    (13) B -> READ ID SEMICOLON . V B
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

  ! shift/reduce conflict for BE resolved as shift
    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)
    ELSE            reduce using rule 3 (V -> .)
    ENDIF           reduce using rule 3 (V -> .)
    RIGHT_PARENTESIS reduce using rule 3 (V -> .)
    ENDWHILE        reduce using rule 3 (V -> .)
    ENDFOR          reduce using rule 3 (V -> .)

  ! BE              [ reduce using rule 3 (V -> .) ]

    V                              shift and go to state 74

state 49

    (14) B -> WRITE STRING WRITE_AUX . SEMICOLON V B

    SEMICOLON       shift and go to state 75


state 50

    (26) WRITE_AUX -> COMA . STRING WRITE_AUX
    (27) WRITE_AUX -> COMA . ID INDICES WRITE_AUX

    STRING          shift and go to state 76
    ID              shift and go to state 77


state 51

    (15) B -> WRITE ID INDICES . WRITE_AUX SEMICOLON V B
    (26) WRITE_AUX -> . COMA STRING WRITE_AUX
    (27) WRITE_AUX -> . COMA ID INDICES WRITE_AUX
    (28) WRITE_AUX -> .

    COMA            shift and go to state 50
    SEMICOLON       reduce using rule 28 (WRITE_AUX -> .)

    WRITE_AUX                      shift and go to state 78

state 52

    (29) EL -> LEFT_PARENTESIS . EL RIGHT_PARENTESIS EL_AUX
    (29) EL -> . LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX
    (30) EL -> . CONSTANT EL_AUX
    (31) EL -> . ID EL_AUX

    LEFT_PARENTESIS shift and go to state 52
    CONSTANT        shift and go to state 54
    ID              shift and go to state 55

    EL                             shift and go to state 79

state 53

    (16) B -> IF LEFT_PARENTESIS EL . RIGHT_PARENTESIS B ELSE_AUX ENDIF V B

    RIGHT_PARENTESIS shift and go to state 80


state 54

    (30) EL -> CONSTANT . EL_AUX
    (32) EL_AUX -> . COMPARISON EL
    (33) EL_AUX -> .

    COMPARISON      shift and go to state 82
    RIGHT_PARENTESIS reduce using rule 33 (EL_AUX -> .)
    COMA            reduce using rule 33 (EL_AUX -> .)

    EL_AUX                         shift and go to state 81

state 55

    (31) EL -> ID . EL_AUX
    (32) EL_AUX -> . COMPARISON EL
    (33) EL_AUX -> .

    COMPARISON      shift and go to state 82
    RIGHT_PARENTESIS reduce using rule 33 (EL_AUX -> .)
    COMA            reduce using rule 33 (EL_AUX -> .)

    EL_AUX                         shift and go to state 83

state 56

    (17) B -> WHILE LEFT_PARENTESIS EL . RIGHT_PARENTESIS V B ENDWHILE V B

    RIGHT_PARENTESIS shift and go to state 84


state 57

    (18) B -> FOR LEFT_PARENTESIS EL . COMA B RIGHT_PARENTESIS V B ENDFOR V B

    COMA            shift and go to state 85


state 58

    (2) V -> BE VARIABLES SEMICOLON B . V
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

  ! shift/reduce conflict for BE resolved as shift
    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)
    ELSE            reduce using rule 3 (V -> .)
    ENDIF           reduce using rule 3 (V -> .)
    RIGHT_PARENTESIS reduce using rule 3 (V -> .)
    ENDWHILE        reduce using rule 3 (V -> .)
    ENDFOR          reduce using rule 3 (V -> .)

  ! BE              [ reduce using rule 3 (V -> .) ]

    V                              shift and go to state 86

state 59

    (6) VARIABLES -> VECTOR ID LEFT_PARENTESIS . CONSTANT RIGHT_PARENTESIS

    CONSTANT        shift and go to state 87


state 60

    (7) VARIABLES -> MATRIX ID LEFT_PARENTESIS . CONSTANT COMA CONSTANT RIGHT_PARENTESIS

    CONSTANT        shift and go to state 88


state 61

    (8) VARIABLES -> CUBE ID LEFT_PARENTESIS . CONSTANT COMA CONSTANT COMA CONSTANT RIGHT_PARENTESIS

    CONSTANT        shift and go to state 89


state 62

    (9) R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B . RETURN R

    RETURN          shift and go to state 90


state 63

    (11) B -> CALL ID SEMICOLON V . B
    (11) B -> . CALL ID SEMICOLON V B
    (12) B -> . ID INDICES EQUAL E SEMICOLON V B
    (13) B -> . READ ID SEMICOLON V B
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (15) B -> . WRITE ID INDICES WRITE_AUX SEMICOLON V B
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (19) B -> .

  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    BE              reduce using rule 19 (B -> .)
    FINISH          reduce using rule 19 (B -> .)
    RETURN          reduce using rule 19 (B -> .)
    ELSE            reduce using rule 19 (B -> .)
    ENDIF           reduce using rule 19 (B -> .)
    RIGHT_PARENTESIS reduce using rule 19 (B -> .)
    ENDWHILE        reduce using rule 19 (B -> .)
    ENDFOR          reduce using rule 19 (B -> .)

  ! CALL            [ reduce using rule 19 (B -> .) ]
  ! ID              [ reduce using rule 19 (B -> .) ]
  ! READ            [ reduce using rule 19 (B -> .) ]
  ! WRITE           [ reduce using rule 19 (B -> .) ]
  ! IF              [ reduce using rule 19 (B -> .) ]
  ! WHILE           [ reduce using rule 19 (B -> .) ]
  ! FOR             [ reduce using rule 19 (B -> .) ]

    B                              shift and go to state 91

state 64

    (12) B -> ID INDICES EQUAL E . SEMICOLON V B

    SEMICOLON       shift and go to state 92


state 65

    (34) E -> LEFT_PARENTESIS E . RIGHT_PARENTESIS E_AUX

    RIGHT_PARENTESIS shift and go to state 93


state 66

    (20) INDICES -> LEFT_PARENTESIS E RIGHT_PARENTESIS .

    EQUAL           reduce using rule 20 (INDICES -> LEFT_PARENTESIS E RIGHT_PARENTESIS .)
    COMA            reduce using rule 20 (INDICES -> LEFT_PARENTESIS E RIGHT_PARENTESIS .)
    SEMICOLON       reduce using rule 20 (INDICES -> LEFT_PARENTESIS E RIGHT_PARENTESIS .)


state 67

    (21) INDICES -> LEFT_PARENTESIS E COMA . E RIGHT_PARENTESIS
    (22) INDICES -> LEFT_PARENTESIS E COMA . E COMA E RIGHT_PARENTESIS
    (34) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (35) E -> . CONSTANT E_AUX
    (36) E -> . ID E_AUX

    LEFT_PARENTESIS shift and go to state 44
    CONSTANT        shift and go to state 46
    ID              shift and go to state 47

    E                              shift and go to state 94

state 68

    (35) E -> CONSTANT E_AUX .

    RIGHT_PARENTESIS reduce using rule 35 (E -> CONSTANT E_AUX .)
    COMA            reduce using rule 35 (E -> CONSTANT E_AUX .)
    SEMICOLON       reduce using rule 35 (E -> CONSTANT E_AUX .)


state 69

    (37) E_AUX -> PLUS . E
    (34) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (35) E -> . CONSTANT E_AUX
    (36) E -> . ID E_AUX

    LEFT_PARENTESIS shift and go to state 44
    CONSTANT        shift and go to state 46
    ID              shift and go to state 47

    E                              shift and go to state 95

state 70

    (38) E_AUX -> STAR . E
    (34) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (35) E -> . CONSTANT E_AUX
    (36) E -> . ID E_AUX

    LEFT_PARENTESIS shift and go to state 44
    CONSTANT        shift and go to state 46
    ID              shift and go to state 47

    E                              shift and go to state 96

state 71

    (39) E_AUX -> SLASH . E
    (34) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (35) E -> . CONSTANT E_AUX
    (36) E -> . ID E_AUX

    LEFT_PARENTESIS shift and go to state 44
    CONSTANT        shift and go to state 46
    ID              shift and go to state 47

    E                              shift and go to state 97

state 72

    (40) E_AUX -> MINUS . E
    (34) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (35) E -> . CONSTANT E_AUX
    (36) E -> . ID E_AUX

    LEFT_PARENTESIS shift and go to state 44
    CONSTANT        shift and go to state 46
    ID              shift and go to state 47

    E                              shift and go to state 98

state 73

    (36) E -> ID E_AUX .

    RIGHT_PARENTESIS reduce using rule 36 (E -> ID E_AUX .)
    COMA            reduce using rule 36 (E -> ID E_AUX .)
    SEMICOLON       reduce using rule 36 (E -> ID E_AUX .)


state 74

    (13) B -> READ ID SEMICOLON V . B
    (11) B -> . CALL ID SEMICOLON V B
    (12) B -> . ID INDICES EQUAL E SEMICOLON V B
    (13) B -> . READ ID SEMICOLON V B
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (15) B -> . WRITE ID INDICES WRITE_AUX SEMICOLON V B
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (19) B -> .

  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    BE              reduce using rule 19 (B -> .)
    FINISH          reduce using rule 19 (B -> .)
    RETURN          reduce using rule 19 (B -> .)
    ELSE            reduce using rule 19 (B -> .)
    ENDIF           reduce using rule 19 (B -> .)
    RIGHT_PARENTESIS reduce using rule 19 (B -> .)
    ENDWHILE        reduce using rule 19 (B -> .)
    ENDFOR          reduce using rule 19 (B -> .)

  ! CALL            [ reduce using rule 19 (B -> .) ]
  ! ID              [ reduce using rule 19 (B -> .) ]
  ! READ            [ reduce using rule 19 (B -> .) ]
  ! WRITE           [ reduce using rule 19 (B -> .) ]
  ! IF              [ reduce using rule 19 (B -> .) ]
  ! WHILE           [ reduce using rule 19 (B -> .) ]
  ! FOR             [ reduce using rule 19 (B -> .) ]

    B                              shift and go to state 99

state 75

    (14) B -> WRITE STRING WRITE_AUX SEMICOLON . V B
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

  ! shift/reduce conflict for BE resolved as shift
    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)
    ELSE            reduce using rule 3 (V -> .)
    ENDIF           reduce using rule 3 (V -> .)
    RIGHT_PARENTESIS reduce using rule 3 (V -> .)
    ENDWHILE        reduce using rule 3 (V -> .)
    ENDFOR          reduce using rule 3 (V -> .)

  ! BE              [ reduce using rule 3 (V -> .) ]

    V                              shift and go to state 100

state 76

    (26) WRITE_AUX -> COMA STRING . WRITE_AUX
    (26) WRITE_AUX -> . COMA STRING WRITE_AUX
    (27) WRITE_AUX -> . COMA ID INDICES WRITE_AUX
    (28) WRITE_AUX -> .

    COMA            shift and go to state 50
    SEMICOLON       reduce using rule 28 (WRITE_AUX -> .)

    WRITE_AUX                      shift and go to state 101

state 77

    (27) WRITE_AUX -> COMA ID . INDICES WRITE_AUX
    (20) INDICES -> . LEFT_PARENTESIS E RIGHT_PARENTESIS
    (21) INDICES -> . LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS
    (22) INDICES -> . LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS
    (23) INDICES -> .

    LEFT_PARENTESIS shift and go to state 27
    COMA            reduce using rule 23 (INDICES -> .)
    SEMICOLON       reduce using rule 23 (INDICES -> .)

    INDICES                        shift and go to state 102

state 78

    (15) B -> WRITE ID INDICES WRITE_AUX . SEMICOLON V B

    SEMICOLON       shift and go to state 103


state 79

    (29) EL -> LEFT_PARENTESIS EL . RIGHT_PARENTESIS EL_AUX

    RIGHT_PARENTESIS shift and go to state 104


state 80

    (16) B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS . B ELSE_AUX ENDIF V B
    (11) B -> . CALL ID SEMICOLON V B
    (12) B -> . ID INDICES EQUAL E SEMICOLON V B
    (13) B -> . READ ID SEMICOLON V B
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (15) B -> . WRITE ID INDICES WRITE_AUX SEMICOLON V B
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (19) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    ELSE            reduce using rule 19 (B -> .)
    ENDIF           reduce using rule 19 (B -> .)

    B                              shift and go to state 105

state 81

    (30) EL -> CONSTANT EL_AUX .

    RIGHT_PARENTESIS reduce using rule 30 (EL -> CONSTANT EL_AUX .)
    COMA            reduce using rule 30 (EL -> CONSTANT EL_AUX .)


state 82

    (32) EL_AUX -> COMPARISON . EL
    (29) EL -> . LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX
    (30) EL -> . CONSTANT EL_AUX
    (31) EL -> . ID EL_AUX

    LEFT_PARENTESIS shift and go to state 52
    CONSTANT        shift and go to state 54
    ID              shift and go to state 55

    EL                             shift and go to state 106

state 83

    (31) EL -> ID EL_AUX .

    RIGHT_PARENTESIS reduce using rule 31 (EL -> ID EL_AUX .)
    COMA            reduce using rule 31 (EL -> ID EL_AUX .)


state 84

    (17) B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS . V B ENDWHILE V B
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    ENDWHILE        reduce using rule 3 (V -> .)

    V                              shift and go to state 107

state 85

    (18) B -> FOR LEFT_PARENTESIS EL COMA . B RIGHT_PARENTESIS V B ENDFOR V B
    (11) B -> . CALL ID SEMICOLON V B
    (12) B -> . ID INDICES EQUAL E SEMICOLON V B
    (13) B -> . READ ID SEMICOLON V B
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (15) B -> . WRITE ID INDICES WRITE_AUX SEMICOLON V B
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (19) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    RIGHT_PARENTESIS reduce using rule 19 (B -> .)

    B                              shift and go to state 108

state 86

    (2) V -> BE VARIABLES SEMICOLON B V .

    CALL            reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    ID              reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    READ            reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    WRITE           reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    IF              reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    WHILE           reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    FOR             reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    FINISH          reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    RETURN          reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    BE              reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    ELSE            reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    ENDIF           reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    RIGHT_PARENTESIS reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    ENDWHILE        reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    ENDFOR          reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)


state 87

    (6) VARIABLES -> VECTOR ID LEFT_PARENTESIS CONSTANT . RIGHT_PARENTESIS

    RIGHT_PARENTESIS shift and go to state 109


state 88

    (7) VARIABLES -> MATRIX ID LEFT_PARENTESIS CONSTANT . COMA CONSTANT RIGHT_PARENTESIS

    COMA            shift and go to state 110


state 89

    (8) VARIABLES -> CUBE ID LEFT_PARENTESIS CONSTANT . COMA CONSTANT COMA CONSTANT RIGHT_PARENTESIS

    COMA            shift and go to state 111


state 90

    (9) R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN . R
    (9) R -> . ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN R
    (10) R -> .

    ROUTINE         shift and go to state 3
    START           reduce using rule 10 (R -> .)
    $end            reduce using rule 10 (R -> .)

    R                              shift and go to state 112

state 91

    (11) B -> CALL ID SEMICOLON V B .

    FINISH          reduce using rule 11 (B -> CALL ID SEMICOLON V B .)
    BE              reduce using rule 11 (B -> CALL ID SEMICOLON V B .)
    CALL            reduce using rule 11 (B -> CALL ID SEMICOLON V B .)
    ID              reduce using rule 11 (B -> CALL ID SEMICOLON V B .)
    READ            reduce using rule 11 (B -> CALL ID SEMICOLON V B .)
    WRITE           reduce using rule 11 (B -> CALL ID SEMICOLON V B .)
    IF              reduce using rule 11 (B -> CALL ID SEMICOLON V B .)
    WHILE           reduce using rule 11 (B -> CALL ID SEMICOLON V B .)
    FOR             reduce using rule 11 (B -> CALL ID SEMICOLON V B .)
    RETURN          reduce using rule 11 (B -> CALL ID SEMICOLON V B .)
    ELSE            reduce using rule 11 (B -> CALL ID SEMICOLON V B .)
    ENDIF           reduce using rule 11 (B -> CALL ID SEMICOLON V B .)
    RIGHT_PARENTESIS reduce using rule 11 (B -> CALL ID SEMICOLON V B .)
    ENDWHILE        reduce using rule 11 (B -> CALL ID SEMICOLON V B .)
    ENDFOR          reduce using rule 11 (B -> CALL ID SEMICOLON V B .)


state 92

    (12) B -> ID INDICES EQUAL E SEMICOLON . V B
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

  ! shift/reduce conflict for BE resolved as shift
    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)
    ELSE            reduce using rule 3 (V -> .)
    ENDIF           reduce using rule 3 (V -> .)
    RIGHT_PARENTESIS reduce using rule 3 (V -> .)
    ENDWHILE        reduce using rule 3 (V -> .)
    ENDFOR          reduce using rule 3 (V -> .)

  ! BE              [ reduce using rule 3 (V -> .) ]

    V                              shift and go to state 113

state 93

    (34) E -> LEFT_PARENTESIS E RIGHT_PARENTESIS . E_AUX
    (37) E_AUX -> . PLUS E
    (38) E_AUX -> . STAR E
    (39) E_AUX -> . SLASH E
    (40) E_AUX -> . MINUS E
    (41) E_AUX -> .

    PLUS            shift and go to state 69
    STAR            shift and go to state 70
    SLASH           shift and go to state 71
    MINUS           shift and go to state 72
    RIGHT_PARENTESIS reduce using rule 41 (E_AUX -> .)
    COMA            reduce using rule 41 (E_AUX -> .)
    SEMICOLON       reduce using rule 41 (E_AUX -> .)

    E_AUX                          shift and go to state 114

state 94

    (21) INDICES -> LEFT_PARENTESIS E COMA E . RIGHT_PARENTESIS
    (22) INDICES -> LEFT_PARENTESIS E COMA E . COMA E RIGHT_PARENTESIS

    RIGHT_PARENTESIS shift and go to state 116
    COMA            shift and go to state 115


state 95

    (37) E_AUX -> PLUS E .

    RIGHT_PARENTESIS reduce using rule 37 (E_AUX -> PLUS E .)
    COMA            reduce using rule 37 (E_AUX -> PLUS E .)
    SEMICOLON       reduce using rule 37 (E_AUX -> PLUS E .)


state 96

    (38) E_AUX -> STAR E .

    RIGHT_PARENTESIS reduce using rule 38 (E_AUX -> STAR E .)
    COMA            reduce using rule 38 (E_AUX -> STAR E .)
    SEMICOLON       reduce using rule 38 (E_AUX -> STAR E .)


state 97

    (39) E_AUX -> SLASH E .

    RIGHT_PARENTESIS reduce using rule 39 (E_AUX -> SLASH E .)
    COMA            reduce using rule 39 (E_AUX -> SLASH E .)
    SEMICOLON       reduce using rule 39 (E_AUX -> SLASH E .)


state 98

    (40) E_AUX -> MINUS E .

    RIGHT_PARENTESIS reduce using rule 40 (E_AUX -> MINUS E .)
    COMA            reduce using rule 40 (E_AUX -> MINUS E .)
    SEMICOLON       reduce using rule 40 (E_AUX -> MINUS E .)


state 99

    (13) B -> READ ID SEMICOLON V B .

    FINISH          reduce using rule 13 (B -> READ ID SEMICOLON V B .)
    BE              reduce using rule 13 (B -> READ ID SEMICOLON V B .)
    CALL            reduce using rule 13 (B -> READ ID SEMICOLON V B .)
    ID              reduce using rule 13 (B -> READ ID SEMICOLON V B .)
    READ            reduce using rule 13 (B -> READ ID SEMICOLON V B .)
    WRITE           reduce using rule 13 (B -> READ ID SEMICOLON V B .)
    IF              reduce using rule 13 (B -> READ ID SEMICOLON V B .)
    WHILE           reduce using rule 13 (B -> READ ID SEMICOLON V B .)
    FOR             reduce using rule 13 (B -> READ ID SEMICOLON V B .)
    RETURN          reduce using rule 13 (B -> READ ID SEMICOLON V B .)
    ELSE            reduce using rule 13 (B -> READ ID SEMICOLON V B .)
    ENDIF           reduce using rule 13 (B -> READ ID SEMICOLON V B .)
    RIGHT_PARENTESIS reduce using rule 13 (B -> READ ID SEMICOLON V B .)
    ENDWHILE        reduce using rule 13 (B -> READ ID SEMICOLON V B .)
    ENDFOR          reduce using rule 13 (B -> READ ID SEMICOLON V B .)


state 100

    (14) B -> WRITE STRING WRITE_AUX SEMICOLON V . B
    (11) B -> . CALL ID SEMICOLON V B
    (12) B -> . ID INDICES EQUAL E SEMICOLON V B
    (13) B -> . READ ID SEMICOLON V B
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (15) B -> . WRITE ID INDICES WRITE_AUX SEMICOLON V B
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (19) B -> .

  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    BE              reduce using rule 19 (B -> .)
    FINISH          reduce using rule 19 (B -> .)
    RETURN          reduce using rule 19 (B -> .)
    ELSE            reduce using rule 19 (B -> .)
    ENDIF           reduce using rule 19 (B -> .)
    RIGHT_PARENTESIS reduce using rule 19 (B -> .)
    ENDWHILE        reduce using rule 19 (B -> .)
    ENDFOR          reduce using rule 19 (B -> .)

  ! CALL            [ reduce using rule 19 (B -> .) ]
  ! ID              [ reduce using rule 19 (B -> .) ]
  ! READ            [ reduce using rule 19 (B -> .) ]
  ! WRITE           [ reduce using rule 19 (B -> .) ]
  ! IF              [ reduce using rule 19 (B -> .) ]
  ! WHILE           [ reduce using rule 19 (B -> .) ]
  ! FOR             [ reduce using rule 19 (B -> .) ]

    B                              shift and go to state 117

state 101

    (26) WRITE_AUX -> COMA STRING WRITE_AUX .

    SEMICOLON       reduce using rule 26 (WRITE_AUX -> COMA STRING WRITE_AUX .)


state 102

    (27) WRITE_AUX -> COMA ID INDICES . WRITE_AUX
    (26) WRITE_AUX -> . COMA STRING WRITE_AUX
    (27) WRITE_AUX -> . COMA ID INDICES WRITE_AUX
    (28) WRITE_AUX -> .

    COMA            shift and go to state 50
    SEMICOLON       reduce using rule 28 (WRITE_AUX -> .)

    WRITE_AUX                      shift and go to state 118

state 103

    (15) B -> WRITE ID INDICES WRITE_AUX SEMICOLON . V B
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

  ! shift/reduce conflict for BE resolved as shift
    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)
    ELSE            reduce using rule 3 (V -> .)
    ENDIF           reduce using rule 3 (V -> .)
    RIGHT_PARENTESIS reduce using rule 3 (V -> .)
    ENDWHILE        reduce using rule 3 (V -> .)
    ENDFOR          reduce using rule 3 (V -> .)

  ! BE              [ reduce using rule 3 (V -> .) ]

    V                              shift and go to state 119

state 104

    (29) EL -> LEFT_PARENTESIS EL RIGHT_PARENTESIS . EL_AUX
    (32) EL_AUX -> . COMPARISON EL
    (33) EL_AUX -> .

    COMPARISON      shift and go to state 82
    RIGHT_PARENTESIS reduce using rule 33 (EL_AUX -> .)
    COMA            reduce using rule 33 (EL_AUX -> .)

    EL_AUX                         shift and go to state 120

state 105

    (16) B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B . ELSE_AUX ENDIF V B
    (24) ELSE_AUX -> . ELSE B
    (25) ELSE_AUX -> .

    ELSE            shift and go to state 122
    ENDIF           reduce using rule 25 (ELSE_AUX -> .)

    ELSE_AUX                       shift and go to state 121

state 106

    (32) EL_AUX -> COMPARISON EL .

    RIGHT_PARENTESIS reduce using rule 32 (EL_AUX -> COMPARISON EL .)
    COMA            reduce using rule 32 (EL_AUX -> COMPARISON EL .)


state 107

    (17) B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V . B ENDWHILE V B
    (11) B -> . CALL ID SEMICOLON V B
    (12) B -> . ID INDICES EQUAL E SEMICOLON V B
    (13) B -> . READ ID SEMICOLON V B
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (15) B -> . WRITE ID INDICES WRITE_AUX SEMICOLON V B
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (19) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    ENDWHILE        reduce using rule 19 (B -> .)

    B                              shift and go to state 123

state 108

    (18) B -> FOR LEFT_PARENTESIS EL COMA B . RIGHT_PARENTESIS V B ENDFOR V B

    RIGHT_PARENTESIS shift and go to state 124


state 109

    (6) VARIABLES -> VECTOR ID LEFT_PARENTESIS CONSTANT RIGHT_PARENTESIS .

    SEMICOLON       reduce using rule 6 (VARIABLES -> VECTOR ID LEFT_PARENTESIS CONSTANT RIGHT_PARENTESIS .)


state 110

    (7) VARIABLES -> MATRIX ID LEFT_PARENTESIS CONSTANT COMA . CONSTANT RIGHT_PARENTESIS

    CONSTANT        shift and go to state 125


state 111

    (8) VARIABLES -> CUBE ID LEFT_PARENTESIS CONSTANT COMA . CONSTANT COMA CONSTANT RIGHT_PARENTESIS

    CONSTANT        shift and go to state 126


state 112

    (9) R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN R .

    START           reduce using rule 9 (R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN R .)
    $end            reduce using rule 9 (R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN R .)


state 113

    (12) B -> ID INDICES EQUAL E SEMICOLON V . B
    (11) B -> . CALL ID SEMICOLON V B
    (12) B -> . ID INDICES EQUAL E SEMICOLON V B
    (13) B -> . READ ID SEMICOLON V B
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (15) B -> . WRITE ID INDICES WRITE_AUX SEMICOLON V B
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (19) B -> .

  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    BE              reduce using rule 19 (B -> .)
    FINISH          reduce using rule 19 (B -> .)
    RETURN          reduce using rule 19 (B -> .)
    ELSE            reduce using rule 19 (B -> .)
    ENDIF           reduce using rule 19 (B -> .)
    RIGHT_PARENTESIS reduce using rule 19 (B -> .)
    ENDWHILE        reduce using rule 19 (B -> .)
    ENDFOR          reduce using rule 19 (B -> .)

  ! CALL            [ reduce using rule 19 (B -> .) ]
  ! ID              [ reduce using rule 19 (B -> .) ]
  ! READ            [ reduce using rule 19 (B -> .) ]
  ! WRITE           [ reduce using rule 19 (B -> .) ]
  ! IF              [ reduce using rule 19 (B -> .) ]
  ! WHILE           [ reduce using rule 19 (B -> .) ]
  ! FOR             [ reduce using rule 19 (B -> .) ]

    B                              shift and go to state 127

state 114

    (34) E -> LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX .

    RIGHT_PARENTESIS reduce using rule 34 (E -> LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX .)
    COMA            reduce using rule 34 (E -> LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX .)
    SEMICOLON       reduce using rule 34 (E -> LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX .)


state 115

    (22) INDICES -> LEFT_PARENTESIS E COMA E COMA . E RIGHT_PARENTESIS
    (34) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (35) E -> . CONSTANT E_AUX
    (36) E -> . ID E_AUX

    LEFT_PARENTESIS shift and go to state 44
    CONSTANT        shift and go to state 46
    ID              shift and go to state 47

    E                              shift and go to state 128

state 116

    (21) INDICES -> LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS .

    EQUAL           reduce using rule 21 (INDICES -> LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS .)
    COMA            reduce using rule 21 (INDICES -> LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS .)
    SEMICOLON       reduce using rule 21 (INDICES -> LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS .)


state 117

    (14) B -> WRITE STRING WRITE_AUX SEMICOLON V B .

    FINISH          reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    BE              reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    CALL            reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    ID              reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    READ            reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    WRITE           reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    IF              reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    WHILE           reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    FOR             reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    RETURN          reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    ELSE            reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    ENDIF           reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    RIGHT_PARENTESIS reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    ENDWHILE        reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    ENDFOR          reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)


state 118

    (27) WRITE_AUX -> COMA ID INDICES WRITE_AUX .

    SEMICOLON       reduce using rule 27 (WRITE_AUX -> COMA ID INDICES WRITE_AUX .)


state 119

    (15) B -> WRITE ID INDICES WRITE_AUX SEMICOLON V . B
    (11) B -> . CALL ID SEMICOLON V B
    (12) B -> . ID INDICES EQUAL E SEMICOLON V B
    (13) B -> . READ ID SEMICOLON V B
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (15) B -> . WRITE ID INDICES WRITE_AUX SEMICOLON V B
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (19) B -> .

  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    BE              reduce using rule 19 (B -> .)
    FINISH          reduce using rule 19 (B -> .)
    RETURN          reduce using rule 19 (B -> .)
    ELSE            reduce using rule 19 (B -> .)
    ENDIF           reduce using rule 19 (B -> .)
    RIGHT_PARENTESIS reduce using rule 19 (B -> .)
    ENDWHILE        reduce using rule 19 (B -> .)
    ENDFOR          reduce using rule 19 (B -> .)

  ! CALL            [ reduce using rule 19 (B -> .) ]
  ! ID              [ reduce using rule 19 (B -> .) ]
  ! READ            [ reduce using rule 19 (B -> .) ]
  ! WRITE           [ reduce using rule 19 (B -> .) ]
  ! IF              [ reduce using rule 19 (B -> .) ]
  ! WHILE           [ reduce using rule 19 (B -> .) ]
  ! FOR             [ reduce using rule 19 (B -> .) ]

    B                              shift and go to state 129

state 120

    (29) EL -> LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX .

    RIGHT_PARENTESIS reduce using rule 29 (EL -> LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX .)
    COMA            reduce using rule 29 (EL -> LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX .)


state 121

    (16) B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX . ENDIF V B

    ENDIF           shift and go to state 130


state 122

    (24) ELSE_AUX -> ELSE . B
    (11) B -> . CALL ID SEMICOLON V B
    (12) B -> . ID INDICES EQUAL E SEMICOLON V B
    (13) B -> . READ ID SEMICOLON V B
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (15) B -> . WRITE ID INDICES WRITE_AUX SEMICOLON V B
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (19) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    ENDIF           reduce using rule 19 (B -> .)

    B                              shift and go to state 131

state 123

    (17) B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B . ENDWHILE V B

    ENDWHILE        shift and go to state 132


state 124

    (18) B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS . V B ENDFOR V B
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    ENDFOR          reduce using rule 3 (V -> .)

    V                              shift and go to state 133

state 125

    (7) VARIABLES -> MATRIX ID LEFT_PARENTESIS CONSTANT COMA CONSTANT . RIGHT_PARENTESIS

    RIGHT_PARENTESIS shift and go to state 134


state 126

    (8) VARIABLES -> CUBE ID LEFT_PARENTESIS CONSTANT COMA CONSTANT . COMA CONSTANT RIGHT_PARENTESIS

    COMA            shift and go to state 135


state 127

    (12) B -> ID INDICES EQUAL E SEMICOLON V B .

    FINISH          reduce using rule 12 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    BE              reduce using rule 12 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    CALL            reduce using rule 12 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    ID              reduce using rule 12 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    READ            reduce using rule 12 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    WRITE           reduce using rule 12 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    IF              reduce using rule 12 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    WHILE           reduce using rule 12 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    FOR             reduce using rule 12 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    RETURN          reduce using rule 12 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    ELSE            reduce using rule 12 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    ENDIF           reduce using rule 12 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    RIGHT_PARENTESIS reduce using rule 12 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    ENDWHILE        reduce using rule 12 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    ENDFOR          reduce using rule 12 (B -> ID INDICES EQUAL E SEMICOLON V B .)


state 128

    (22) INDICES -> LEFT_PARENTESIS E COMA E COMA E . RIGHT_PARENTESIS

    RIGHT_PARENTESIS shift and go to state 136


state 129

    (15) B -> WRITE ID INDICES WRITE_AUX SEMICOLON V B .

    FINISH          reduce using rule 15 (B -> WRITE ID INDICES WRITE_AUX SEMICOLON V B .)
    BE              reduce using rule 15 (B -> WRITE ID INDICES WRITE_AUX SEMICOLON V B .)
    CALL            reduce using rule 15 (B -> WRITE ID INDICES WRITE_AUX SEMICOLON V B .)
    ID              reduce using rule 15 (B -> WRITE ID INDICES WRITE_AUX SEMICOLON V B .)
    READ            reduce using rule 15 (B -> WRITE ID INDICES WRITE_AUX SEMICOLON V B .)
    WRITE           reduce using rule 15 (B -> WRITE ID INDICES WRITE_AUX SEMICOLON V B .)
    IF              reduce using rule 15 (B -> WRITE ID INDICES WRITE_AUX SEMICOLON V B .)
    WHILE           reduce using rule 15 (B -> WRITE ID INDICES WRITE_AUX SEMICOLON V B .)
    FOR             reduce using rule 15 (B -> WRITE ID INDICES WRITE_AUX SEMICOLON V B .)
    RETURN          reduce using rule 15 (B -> WRITE ID INDICES WRITE_AUX SEMICOLON V B .)
    ELSE            reduce using rule 15 (B -> WRITE ID INDICES WRITE_AUX SEMICOLON V B .)
    ENDIF           reduce using rule 15 (B -> WRITE ID INDICES WRITE_AUX SEMICOLON V B .)
    RIGHT_PARENTESIS reduce using rule 15 (B -> WRITE ID INDICES WRITE_AUX SEMICOLON V B .)
    ENDWHILE        reduce using rule 15 (B -> WRITE ID INDICES WRITE_AUX SEMICOLON V B .)
    ENDFOR          reduce using rule 15 (B -> WRITE ID INDICES WRITE_AUX SEMICOLON V B .)


state 130

    (16) B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF . V B
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

  ! shift/reduce conflict for BE resolved as shift
    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)
    ELSE            reduce using rule 3 (V -> .)
    ENDIF           reduce using rule 3 (V -> .)
    RIGHT_PARENTESIS reduce using rule 3 (V -> .)
    ENDWHILE        reduce using rule 3 (V -> .)
    ENDFOR          reduce using rule 3 (V -> .)

  ! BE              [ reduce using rule 3 (V -> .) ]

    V                              shift and go to state 137

state 131

    (24) ELSE_AUX -> ELSE B .

    ENDIF           reduce using rule 24 (ELSE_AUX -> ELSE B .)


state 132

    (17) B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE . V B
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

  ! shift/reduce conflict for BE resolved as shift
    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)
    ELSE            reduce using rule 3 (V -> .)
    ENDIF           reduce using rule 3 (V -> .)
    RIGHT_PARENTESIS reduce using rule 3 (V -> .)
    ENDWHILE        reduce using rule 3 (V -> .)
    ENDFOR          reduce using rule 3 (V -> .)

  ! BE              [ reduce using rule 3 (V -> .) ]

    V                              shift and go to state 138

state 133

    (18) B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V . B ENDFOR V B
    (11) B -> . CALL ID SEMICOLON V B
    (12) B -> . ID INDICES EQUAL E SEMICOLON V B
    (13) B -> . READ ID SEMICOLON V B
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (15) B -> . WRITE ID INDICES WRITE_AUX SEMICOLON V B
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (19) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    ENDFOR          reduce using rule 19 (B -> .)

    B                              shift and go to state 139

state 134

    (7) VARIABLES -> MATRIX ID LEFT_PARENTESIS CONSTANT COMA CONSTANT RIGHT_PARENTESIS .

    SEMICOLON       reduce using rule 7 (VARIABLES -> MATRIX ID LEFT_PARENTESIS CONSTANT COMA CONSTANT RIGHT_PARENTESIS .)


state 135

    (8) VARIABLES -> CUBE ID LEFT_PARENTESIS CONSTANT COMA CONSTANT COMA . CONSTANT RIGHT_PARENTESIS

    CONSTANT        shift and go to state 140


state 136

    (22) INDICES -> LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS .

    EQUAL           reduce using rule 22 (INDICES -> LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS .)
    COMA            reduce using rule 22 (INDICES -> LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS .)
    SEMICOLON       reduce using rule 22 (INDICES -> LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS .)


state 137

    (16) B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V . B
    (11) B -> . CALL ID SEMICOLON V B
    (12) B -> . ID INDICES EQUAL E SEMICOLON V B
    (13) B -> . READ ID SEMICOLON V B
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (15) B -> . WRITE ID INDICES WRITE_AUX SEMICOLON V B
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (19) B -> .

  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    BE              reduce using rule 19 (B -> .)
    FINISH          reduce using rule 19 (B -> .)
    RETURN          reduce using rule 19 (B -> .)
    ELSE            reduce using rule 19 (B -> .)
    ENDIF           reduce using rule 19 (B -> .)
    RIGHT_PARENTESIS reduce using rule 19 (B -> .)
    ENDWHILE        reduce using rule 19 (B -> .)
    ENDFOR          reduce using rule 19 (B -> .)

  ! CALL            [ reduce using rule 19 (B -> .) ]
  ! ID              [ reduce using rule 19 (B -> .) ]
  ! READ            [ reduce using rule 19 (B -> .) ]
  ! WRITE           [ reduce using rule 19 (B -> .) ]
  ! IF              [ reduce using rule 19 (B -> .) ]
  ! WHILE           [ reduce using rule 19 (B -> .) ]
  ! FOR             [ reduce using rule 19 (B -> .) ]

    B                              shift and go to state 141

state 138

    (17) B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V . B
    (11) B -> . CALL ID SEMICOLON V B
    (12) B -> . ID INDICES EQUAL E SEMICOLON V B
    (13) B -> . READ ID SEMICOLON V B
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (15) B -> . WRITE ID INDICES WRITE_AUX SEMICOLON V B
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (19) B -> .

  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    BE              reduce using rule 19 (B -> .)
    FINISH          reduce using rule 19 (B -> .)
    RETURN          reduce using rule 19 (B -> .)
    ELSE            reduce using rule 19 (B -> .)
    ENDIF           reduce using rule 19 (B -> .)
    RIGHT_PARENTESIS reduce using rule 19 (B -> .)
    ENDWHILE        reduce using rule 19 (B -> .)
    ENDFOR          reduce using rule 19 (B -> .)

  ! CALL            [ reduce using rule 19 (B -> .) ]
  ! ID              [ reduce using rule 19 (B -> .) ]
  ! READ            [ reduce using rule 19 (B -> .) ]
  ! WRITE           [ reduce using rule 19 (B -> .) ]
  ! IF              [ reduce using rule 19 (B -> .) ]
  ! WHILE           [ reduce using rule 19 (B -> .) ]
  ! FOR             [ reduce using rule 19 (B -> .) ]

    B                              shift and go to state 142

state 139

    (18) B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B . ENDFOR V B

    ENDFOR          shift and go to state 143


state 140

    (8) VARIABLES -> CUBE ID LEFT_PARENTESIS CONSTANT COMA CONSTANT COMA CONSTANT . RIGHT_PARENTESIS

    RIGHT_PARENTESIS shift and go to state 144


state 141

    (16) B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .

    FINISH          reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    BE              reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    CALL            reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    ID              reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    READ            reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    WRITE           reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    IF              reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    WHILE           reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    FOR             reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    RETURN          reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    ELSE            reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    ENDIF           reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    RIGHT_PARENTESIS reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    ENDWHILE        reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    ENDFOR          reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)


state 142

    (17) B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .

    FINISH          reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    BE              reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    CALL            reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    ID              reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    READ            reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    WRITE           reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    IF              reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    WHILE           reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    FOR             reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    RETURN          reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    ELSE            reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    ENDIF           reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    RIGHT_PARENTESIS reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    ENDWHILE        reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    ENDFOR          reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)


state 143

    (18) B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR . V B
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

  ! shift/reduce conflict for BE resolved as shift
    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)
    ELSE            reduce using rule 3 (V -> .)
    ENDIF           reduce using rule 3 (V -> .)
    RIGHT_PARENTESIS reduce using rule 3 (V -> .)
    ENDWHILE        reduce using rule 3 (V -> .)
    ENDFOR          reduce using rule 3 (V -> .)

  ! BE              [ reduce using rule 3 (V -> .) ]

    V                              shift and go to state 145

state 144

    (8) VARIABLES -> CUBE ID LEFT_PARENTESIS CONSTANT COMA CONSTANT COMA CONSTANT RIGHT_PARENTESIS .

    SEMICOLON       reduce using rule 8 (VARIABLES -> CUBE ID LEFT_PARENTESIS CONSTANT COMA CONSTANT COMA CONSTANT RIGHT_PARENTESIS .)


state 145

    (18) B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V . B
    (11) B -> . CALL ID SEMICOLON V B
    (12) B -> . ID INDICES EQUAL E SEMICOLON V B
    (13) B -> . READ ID SEMICOLON V B
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (15) B -> . WRITE ID INDICES WRITE_AUX SEMICOLON V B
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (19) B -> .

  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    BE              reduce using rule 19 (B -> .)
    FINISH          reduce using rule 19 (B -> .)
    RETURN          reduce using rule 19 (B -> .)
    ELSE            reduce using rule 19 (B -> .)
    ENDIF           reduce using rule 19 (B -> .)
    RIGHT_PARENTESIS reduce using rule 19 (B -> .)
    ENDWHILE        reduce using rule 19 (B -> .)
    ENDFOR          reduce using rule 19 (B -> .)

  ! CALL            [ reduce using rule 19 (B -> .) ]
  ! ID              [ reduce using rule 19 (B -> .) ]
  ! READ            [ reduce using rule 19 (B -> .) ]
  ! WRITE           [ reduce using rule 19 (B -> .) ]
  ! IF              [ reduce using rule 19 (B -> .) ]
  ! WHILE           [ reduce using rule 19 (B -> .) ]
  ! FOR             [ reduce using rule 19 (B -> .) ]

    B                              shift and go to state 146

state 146

    (18) B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .

    FINISH          reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    BE              reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    CALL            reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    ID              reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    READ            reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    WRITE           reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    IF              reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    WHILE           reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    FOR             reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    RETURN          reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    ELSE            reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    ENDIF           reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    RIGHT_PARENTESIS reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    ENDWHILE        reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    ENDFOR          reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CALL in state 34 resolved as shift
WARNING: shift/reduce conflict for ID in state 34 resolved as shift
WARNING: shift/reduce conflict for READ in state 34 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 34 resolved as shift
WARNING: shift/reduce conflict for IF in state 34 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 34 resolved as shift
WARNING: shift/reduce conflict for FOR in state 34 resolved as shift
WARNING: shift/reduce conflict for BE in state 42 resolved as shift
WARNING: shift/reduce conflict for BE in state 48 resolved as shift
WARNING: shift/reduce conflict for BE in state 58 resolved as shift
WARNING: shift/reduce conflict for CALL in state 63 resolved as shift
WARNING: shift/reduce conflict for ID in state 63 resolved as shift
WARNING: shift/reduce conflict for READ in state 63 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 63 resolved as shift
WARNING: shift/reduce conflict for IF in state 63 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 63 resolved as shift
WARNING: shift/reduce conflict for FOR in state 63 resolved as shift
WARNING: shift/reduce conflict for CALL in state 74 resolved as shift
WARNING: shift/reduce conflict for ID in state 74 resolved as shift
WARNING: shift/reduce conflict for READ in state 74 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 74 resolved as shift
WARNING: shift/reduce conflict for IF in state 74 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 74 resolved as shift
WARNING: shift/reduce conflict for FOR in state 74 resolved as shift
WARNING: shift/reduce conflict for BE in state 75 resolved as shift
WARNING: shift/reduce conflict for BE in state 92 resolved as shift
WARNING: shift/reduce conflict for CALL in state 100 resolved as shift
WARNING: shift/reduce conflict for ID in state 100 resolved as shift
WARNING: shift/reduce conflict for READ in state 100 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 100 resolved as shift
WARNING: shift/reduce conflict for IF in state 100 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 100 resolved as shift
WARNING: shift/reduce conflict for FOR in state 100 resolved as shift
WARNING: shift/reduce conflict for BE in state 103 resolved as shift
WARNING: shift/reduce conflict for CALL in state 113 resolved as shift
WARNING: shift/reduce conflict for ID in state 113 resolved as shift
WARNING: shift/reduce conflict for READ in state 113 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 113 resolved as shift
WARNING: shift/reduce conflict for IF in state 113 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 113 resolved as shift
WARNING: shift/reduce conflict for FOR in state 113 resolved as shift
WARNING: shift/reduce conflict for CALL in state 119 resolved as shift
WARNING: shift/reduce conflict for ID in state 119 resolved as shift
WARNING: shift/reduce conflict for READ in state 119 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 119 resolved as shift
WARNING: shift/reduce conflict for IF in state 119 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 119 resolved as shift
WARNING: shift/reduce conflict for FOR in state 119 resolved as shift
WARNING: shift/reduce conflict for BE in state 130 resolved as shift
WARNING: shift/reduce conflict for BE in state 132 resolved as shift
WARNING: shift/reduce conflict for CALL in state 137 resolved as shift
WARNING: shift/reduce conflict for ID in state 137 resolved as shift
WARNING: shift/reduce conflict for READ in state 137 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 137 resolved as shift
WARNING: shift/reduce conflict for IF in state 137 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 137 resolved as shift
WARNING: shift/reduce conflict for FOR in state 137 resolved as shift
WARNING: shift/reduce conflict for CALL in state 138 resolved as shift
WARNING: shift/reduce conflict for ID in state 138 resolved as shift
WARNING: shift/reduce conflict for READ in state 138 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 138 resolved as shift
WARNING: shift/reduce conflict for IF in state 138 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 138 resolved as shift
WARNING: shift/reduce conflict for FOR in state 138 resolved as shift
WARNING: shift/reduce conflict for BE in state 143 resolved as shift
WARNING: shift/reduce conflict for CALL in state 145 resolved as shift
WARNING: shift/reduce conflict for ID in state 145 resolved as shift
WARNING: shift/reduce conflict for READ in state 145 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 145 resolved as shift
WARNING: shift/reduce conflict for IF in state 145 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 145 resolved as shift
WARNING: shift/reduce conflict for FOR in state 145 resolved as shift
