Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BOOLEAN_EXPRESSION
    EQUAL_EQUAL
    GREATER_THAN
    GREATER_THAN_EQUAL
    LENGTH
    LENGTH_I
    LENGTH_J
    LENGTH_K
    LESS_THAN
    LESS_THAN_EQUAL
    MATHEMATICAL_CONSTANT
    MATHEMATICAL_EXPRESSION
    MEAN
    MEDIAN
    MODE
    NOT
    NOT_EQUAL
    OR
    RREF

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> R START V B FINISH R
Rule 2     V -> BE VARIABLES SEMICOLON B V
Rule 3     V -> <empty>
Rule 4     VARIABLES -> FLOAT ID
Rule 5     VARIABLES -> T ID
Rule 6     VARIABLES -> T ID LEFT_PARENTESIS CONSTANT RIGHT_PARENTESIS
Rule 7     VARIABLES -> T ID LEFT_PARENTESIS CONSTANT COMA CONSTANT RIGHT_PARENTESIS
Rule 8     VARIABLES -> T ID LEFT_PARENTESIS CONSTANT COMA CONSTANT COMA CONSTANT RIGHT_PARENTESIS
Rule 9     T -> INT
Rule 10    T -> VECTOR
Rule 11    T -> MATRIX
Rule 12    T -> CUBE
Rule 13    R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN R
Rule 14    R -> <empty>
Rule 15    B -> CALL ID SEMICOLON V B
Rule 16    B -> ID INDICES EQUAL E SEMICOLON V B
Rule 17    B -> READ ID SEMICOLON V B
Rule 18    B -> WRITE STRING WRITE_AUX SEMICOLON V B
Rule 19    B -> WRITE E WRITE_AUX SEMICOLON V B
Rule 20    B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
Rule 21    B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
Rule 22    B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
Rule 23    B -> <empty>
Rule 24    INDICES -> LEFT_PARENTESIS E RIGHT_PARENTESIS
Rule 25    INDICES -> LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS
Rule 26    INDICES -> LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS
Rule 27    INDICES -> <empty>
Rule 28    ELSE_AUX -> ELSE B
Rule 29    ELSE_AUX -> <empty>
Rule 30    WRITE_AUX -> COMA STRING WRITE_AUX
Rule 31    WRITE_AUX -> COMA ID INDICES WRITE_AUX
Rule 32    WRITE_AUX -> <empty>
Rule 33    EL -> LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX
Rule 34    EL -> CONSTANT EL_AUX
Rule 35    EL -> ID EL_AUX
Rule 36    EL_AUX -> COMPARISON EL
Rule 37    EL_AUX -> <empty>
Rule 38    E -> LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
Rule 39    E -> CONSTANT E_AUX
Rule 40    E -> ID INDICES E_AUX
Rule 41    E_AUX -> PLUS E
Rule 42    E_AUX -> STAR E
Rule 43    E_AUX -> SLASH E
Rule 44    E_AUX -> MINUS E
Rule 45    E_AUX -> <empty>

Terminals, with rules where they appear

AND                  : 
BE                   : 2
BOOLEAN_EXPRESSION   : 
CALL                 : 15
COMA                 : 7 8 8 22 25 26 26 30 31
COMPARISON           : 36
CONSTANT             : 6 7 7 8 8 8 34 39
CUBE                 : 12
ELSE                 : 28
ENDFOR               : 22
ENDIF                : 20
ENDWHILE             : 21
EQUAL                : 16
EQUAL_EQUAL          : 
FINISH               : 1
FLOAT                : 4
FOR                  : 22
GREATER_THAN         : 
GREATER_THAN_EQUAL   : 
ID                   : 4 5 6 7 8 13 15 16 17 31 35 40
IF                   : 20
INT                  : 9
LEFT_PARENTESIS      : 6 7 8 13 20 21 22 24 25 26 33 38
LENGTH               : 
LENGTH_I             : 
LENGTH_J             : 
LENGTH_K             : 
LESS_THAN            : 
LESS_THAN_EQUAL      : 
MATHEMATICAL_CONSTANT : 
MATHEMATICAL_EXPRESSION : 
MATRIX               : 11
MEAN                 : 
MEDIAN               : 
MINUS                : 44
MODE                 : 
NOT                  : 
NOT_EQUAL            : 
OR                   : 
PLUS                 : 41
READ                 : 17
RETURN               : 13
RIGHT_PARENTESIS     : 6 7 8 13 20 21 22 24 25 26 33 38
ROUTINE              : 13
RREF                 : 
SEMICOLON            : 2 15 16 17 18 19
SLASH                : 43
STAR                 : 42
START                : 1
STRING               : 18 30
VECTOR               : 10
WHILE                : 21
WRITE                : 18 19
error                : 

Nonterminals, with rules where they appear

B                    : 1 2 13 15 16 17 18 19 20 20 21 21 22 22 22 28
E                    : 16 19 24 25 25 26 26 26 38 41 42 43 44
EL                   : 20 21 22 33 36
ELSE_AUX             : 20
EL_AUX               : 33 34 35
E_AUX                : 38 39 40
INDICES              : 16 31 40
PROGRAMA             : 0
R                    : 1 1 13
T                    : 5 6 7 8
V                    : 1 2 13 15 16 17 18 19 20 21 21 22 22
VARIABLES            : 2
WRITE_AUX            : 18 19 30 31

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . R START V B FINISH R
    (13) R -> . ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN R
    (14) R -> .

    ROUTINE         shift and go to state 3
    START           reduce using rule 14 (R -> .)

    PROGRAMA                       shift and go to state 1
    R                              shift and go to state 2

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> R . START V B FINISH R

    START           shift and go to state 4


state 3

    (13) R -> ROUTINE . LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN R

    LEFT_PARENTESIS shift and go to state 5


state 4

    (1) PROGRAMA -> R START . V B FINISH R
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)

    V                              shift and go to state 6

state 5

    (13) R -> ROUTINE LEFT_PARENTESIS . ID RIGHT_PARENTESIS V B RETURN R

    ID              shift and go to state 8


state 6

    (1) PROGRAMA -> R START V . B FINISH R
    (15) B -> . CALL ID SEMICOLON V B
    (16) B -> . ID INDICES EQUAL E SEMICOLON V B
    (17) B -> . READ ID SEMICOLON V B
    (18) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (19) B -> . WRITE E WRITE_AUX SEMICOLON V B
    (20) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (21) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (22) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (23) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    FINISH          reduce using rule 23 (B -> .)

    B                              shift and go to state 9

state 7

    (2) V -> BE . VARIABLES SEMICOLON B V
    (4) VARIABLES -> . FLOAT ID
    (5) VARIABLES -> . T ID
    (6) VARIABLES -> . T ID LEFT_PARENTESIS CONSTANT RIGHT_PARENTESIS
    (7) VARIABLES -> . T ID LEFT_PARENTESIS CONSTANT COMA CONSTANT RIGHT_PARENTESIS
    (8) VARIABLES -> . T ID LEFT_PARENTESIS CONSTANT COMA CONSTANT COMA CONSTANT RIGHT_PARENTESIS
    (9) T -> . INT
    (10) T -> . VECTOR
    (11) T -> . MATRIX
    (12) T -> . CUBE

    FLOAT           shift and go to state 18
    INT             shift and go to state 20
    VECTOR          shift and go to state 21
    MATRIX          shift and go to state 22
    CUBE            shift and go to state 23

    VARIABLES                      shift and go to state 17
    T                              shift and go to state 19

state 8

    (13) R -> ROUTINE LEFT_PARENTESIS ID . RIGHT_PARENTESIS V B RETURN R

    RIGHT_PARENTESIS shift and go to state 24


state 9

    (1) PROGRAMA -> R START V B . FINISH R

    FINISH          shift and go to state 25


state 10

    (15) B -> CALL . ID SEMICOLON V B

    ID              shift and go to state 26


state 11

    (16) B -> ID . INDICES EQUAL E SEMICOLON V B
    (24) INDICES -> . LEFT_PARENTESIS E RIGHT_PARENTESIS
    (25) INDICES -> . LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS
    (26) INDICES -> . LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS
    (27) INDICES -> .

    LEFT_PARENTESIS shift and go to state 28
    EQUAL           reduce using rule 27 (INDICES -> .)

    INDICES                        shift and go to state 27

state 12

    (17) B -> READ . ID SEMICOLON V B

    ID              shift and go to state 29


state 13

    (18) B -> WRITE . STRING WRITE_AUX SEMICOLON V B
    (19) B -> WRITE . E WRITE_AUX SEMICOLON V B
    (38) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (39) E -> . CONSTANT E_AUX
    (40) E -> . ID INDICES E_AUX

    STRING          shift and go to state 30
    LEFT_PARENTESIS shift and go to state 32
    CONSTANT        shift and go to state 33
    ID              shift and go to state 34

    E                              shift and go to state 31

state 14

    (20) B -> IF . LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B

    LEFT_PARENTESIS shift and go to state 35


state 15

    (21) B -> WHILE . LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B

    LEFT_PARENTESIS shift and go to state 36


state 16

    (22) B -> FOR . LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B

    LEFT_PARENTESIS shift and go to state 37


state 17

    (2) V -> BE VARIABLES . SEMICOLON B V

    SEMICOLON       shift and go to state 38


state 18

    (4) VARIABLES -> FLOAT . ID

    ID              shift and go to state 39


state 19

    (5) VARIABLES -> T . ID
    (6) VARIABLES -> T . ID LEFT_PARENTESIS CONSTANT RIGHT_PARENTESIS
    (7) VARIABLES -> T . ID LEFT_PARENTESIS CONSTANT COMA CONSTANT RIGHT_PARENTESIS
    (8) VARIABLES -> T . ID LEFT_PARENTESIS CONSTANT COMA CONSTANT COMA CONSTANT RIGHT_PARENTESIS

    ID              shift and go to state 40


state 20

    (9) T -> INT .

    ID              reduce using rule 9 (T -> INT .)


state 21

    (10) T -> VECTOR .

    ID              reduce using rule 10 (T -> VECTOR .)


state 22

    (11) T -> MATRIX .

    ID              reduce using rule 11 (T -> MATRIX .)


state 23

    (12) T -> CUBE .

    ID              reduce using rule 12 (T -> CUBE .)


state 24

    (13) R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS . V B RETURN R
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)

    V                              shift and go to state 41

state 25

    (1) PROGRAMA -> R START V B FINISH . R
    (13) R -> . ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN R
    (14) R -> .

    ROUTINE         shift and go to state 3
    $end            reduce using rule 14 (R -> .)

    R                              shift and go to state 42

state 26

    (15) B -> CALL ID . SEMICOLON V B

    SEMICOLON       shift and go to state 43


state 27

    (16) B -> ID INDICES . EQUAL E SEMICOLON V B

    EQUAL           shift and go to state 44


state 28

    (24) INDICES -> LEFT_PARENTESIS . E RIGHT_PARENTESIS
    (25) INDICES -> LEFT_PARENTESIS . E COMA E RIGHT_PARENTESIS
    (26) INDICES -> LEFT_PARENTESIS . E COMA E COMA E RIGHT_PARENTESIS
    (38) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (39) E -> . CONSTANT E_AUX
    (40) E -> . ID INDICES E_AUX

    LEFT_PARENTESIS shift and go to state 32
    CONSTANT        shift and go to state 33
    ID              shift and go to state 34

    E                              shift and go to state 45

state 29

    (17) B -> READ ID . SEMICOLON V B

    SEMICOLON       shift and go to state 46


state 30

    (18) B -> WRITE STRING . WRITE_AUX SEMICOLON V B
    (30) WRITE_AUX -> . COMA STRING WRITE_AUX
    (31) WRITE_AUX -> . COMA ID INDICES WRITE_AUX
    (32) WRITE_AUX -> .

    COMA            shift and go to state 48
    SEMICOLON       reduce using rule 32 (WRITE_AUX -> .)

    WRITE_AUX                      shift and go to state 47

state 31

    (19) B -> WRITE E . WRITE_AUX SEMICOLON V B
    (30) WRITE_AUX -> . COMA STRING WRITE_AUX
    (31) WRITE_AUX -> . COMA ID INDICES WRITE_AUX
    (32) WRITE_AUX -> .

    COMA            shift and go to state 48
    SEMICOLON       reduce using rule 32 (WRITE_AUX -> .)

    WRITE_AUX                      shift and go to state 49

state 32

    (38) E -> LEFT_PARENTESIS . E RIGHT_PARENTESIS E_AUX
    (38) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (39) E -> . CONSTANT E_AUX
    (40) E -> . ID INDICES E_AUX

    LEFT_PARENTESIS shift and go to state 32
    CONSTANT        shift and go to state 33
    ID              shift and go to state 34

    E                              shift and go to state 50

state 33

    (39) E -> CONSTANT . E_AUX
    (41) E_AUX -> . PLUS E
    (42) E_AUX -> . STAR E
    (43) E_AUX -> . SLASH E
    (44) E_AUX -> . MINUS E
    (45) E_AUX -> .

    PLUS            shift and go to state 52
    STAR            shift and go to state 53
    SLASH           shift and go to state 54
    MINUS           shift and go to state 55
    COMA            reduce using rule 45 (E_AUX -> .)
    SEMICOLON       reduce using rule 45 (E_AUX -> .)
    RIGHT_PARENTESIS reduce using rule 45 (E_AUX -> .)

    E_AUX                          shift and go to state 51

state 34

    (40) E -> ID . INDICES E_AUX
    (24) INDICES -> . LEFT_PARENTESIS E RIGHT_PARENTESIS
    (25) INDICES -> . LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS
    (26) INDICES -> . LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS
    (27) INDICES -> .

    LEFT_PARENTESIS shift and go to state 28
    PLUS            reduce using rule 27 (INDICES -> .)
    STAR            reduce using rule 27 (INDICES -> .)
    SLASH           reduce using rule 27 (INDICES -> .)
    MINUS           reduce using rule 27 (INDICES -> .)
    COMA            reduce using rule 27 (INDICES -> .)
    SEMICOLON       reduce using rule 27 (INDICES -> .)
    RIGHT_PARENTESIS reduce using rule 27 (INDICES -> .)

    INDICES                        shift and go to state 56

state 35

    (20) B -> IF LEFT_PARENTESIS . EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (33) EL -> . LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX
    (34) EL -> . CONSTANT EL_AUX
    (35) EL -> . ID EL_AUX

    LEFT_PARENTESIS shift and go to state 57
    CONSTANT        shift and go to state 59
    ID              shift and go to state 60

    EL                             shift and go to state 58

state 36

    (21) B -> WHILE LEFT_PARENTESIS . EL RIGHT_PARENTESIS V B ENDWHILE V B
    (33) EL -> . LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX
    (34) EL -> . CONSTANT EL_AUX
    (35) EL -> . ID EL_AUX

    LEFT_PARENTESIS shift and go to state 57
    CONSTANT        shift and go to state 59
    ID              shift and go to state 60

    EL                             shift and go to state 61

state 37

    (22) B -> FOR LEFT_PARENTESIS . EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (33) EL -> . LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX
    (34) EL -> . CONSTANT EL_AUX
    (35) EL -> . ID EL_AUX

    LEFT_PARENTESIS shift and go to state 57
    CONSTANT        shift and go to state 59
    ID              shift and go to state 60

    EL                             shift and go to state 62

state 38

    (2) V -> BE VARIABLES SEMICOLON . B V
    (15) B -> . CALL ID SEMICOLON V B
    (16) B -> . ID INDICES EQUAL E SEMICOLON V B
    (17) B -> . READ ID SEMICOLON V B
    (18) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (19) B -> . WRITE E WRITE_AUX SEMICOLON V B
    (20) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (21) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (22) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (23) B -> .

  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    BE              reduce using rule 23 (B -> .)
    FINISH          reduce using rule 23 (B -> .)
    RETURN          reduce using rule 23 (B -> .)
    ELSE            reduce using rule 23 (B -> .)
    ENDIF           reduce using rule 23 (B -> .)
    RIGHT_PARENTESIS reduce using rule 23 (B -> .)
    ENDWHILE        reduce using rule 23 (B -> .)
    ENDFOR          reduce using rule 23 (B -> .)

  ! CALL            [ reduce using rule 23 (B -> .) ]
  ! ID              [ reduce using rule 23 (B -> .) ]
  ! READ            [ reduce using rule 23 (B -> .) ]
  ! WRITE           [ reduce using rule 23 (B -> .) ]
  ! IF              [ reduce using rule 23 (B -> .) ]
  ! WHILE           [ reduce using rule 23 (B -> .) ]
  ! FOR             [ reduce using rule 23 (B -> .) ]

    B                              shift and go to state 63

state 39

    (4) VARIABLES -> FLOAT ID .

    SEMICOLON       reduce using rule 4 (VARIABLES -> FLOAT ID .)


state 40

    (5) VARIABLES -> T ID .
    (6) VARIABLES -> T ID . LEFT_PARENTESIS CONSTANT RIGHT_PARENTESIS
    (7) VARIABLES -> T ID . LEFT_PARENTESIS CONSTANT COMA CONSTANT RIGHT_PARENTESIS
    (8) VARIABLES -> T ID . LEFT_PARENTESIS CONSTANT COMA CONSTANT COMA CONSTANT RIGHT_PARENTESIS

    SEMICOLON       reduce using rule 5 (VARIABLES -> T ID .)
    LEFT_PARENTESIS shift and go to state 64


state 41

    (13) R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V . B RETURN R
    (15) B -> . CALL ID SEMICOLON V B
    (16) B -> . ID INDICES EQUAL E SEMICOLON V B
    (17) B -> . READ ID SEMICOLON V B
    (18) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (19) B -> . WRITE E WRITE_AUX SEMICOLON V B
    (20) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (21) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (22) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (23) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    RETURN          reduce using rule 23 (B -> .)

    B                              shift and go to state 65

state 42

    (1) PROGRAMA -> R START V B FINISH R .

    $end            reduce using rule 1 (PROGRAMA -> R START V B FINISH R .)


state 43

    (15) B -> CALL ID SEMICOLON . V B
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

  ! shift/reduce conflict for BE resolved as shift
    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)
    ELSE            reduce using rule 3 (V -> .)
    ENDIF           reduce using rule 3 (V -> .)
    RIGHT_PARENTESIS reduce using rule 3 (V -> .)
    ENDWHILE        reduce using rule 3 (V -> .)
    ENDFOR          reduce using rule 3 (V -> .)

  ! BE              [ reduce using rule 3 (V -> .) ]

    V                              shift and go to state 66

state 44

    (16) B -> ID INDICES EQUAL . E SEMICOLON V B
    (38) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (39) E -> . CONSTANT E_AUX
    (40) E -> . ID INDICES E_AUX

    LEFT_PARENTESIS shift and go to state 32
    CONSTANT        shift and go to state 33
    ID              shift and go to state 34

    E                              shift and go to state 67

state 45

    (24) INDICES -> LEFT_PARENTESIS E . RIGHT_PARENTESIS
    (25) INDICES -> LEFT_PARENTESIS E . COMA E RIGHT_PARENTESIS
    (26) INDICES -> LEFT_PARENTESIS E . COMA E COMA E RIGHT_PARENTESIS

    RIGHT_PARENTESIS shift and go to state 68
    COMA            shift and go to state 69


state 46

    (17) B -> READ ID SEMICOLON . V B
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

  ! shift/reduce conflict for BE resolved as shift
    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)
    ELSE            reduce using rule 3 (V -> .)
    ENDIF           reduce using rule 3 (V -> .)
    RIGHT_PARENTESIS reduce using rule 3 (V -> .)
    ENDWHILE        reduce using rule 3 (V -> .)
    ENDFOR          reduce using rule 3 (V -> .)

  ! BE              [ reduce using rule 3 (V -> .) ]

    V                              shift and go to state 70

state 47

    (18) B -> WRITE STRING WRITE_AUX . SEMICOLON V B

    SEMICOLON       shift and go to state 71


state 48

    (30) WRITE_AUX -> COMA . STRING WRITE_AUX
    (31) WRITE_AUX -> COMA . ID INDICES WRITE_AUX

    STRING          shift and go to state 72
    ID              shift and go to state 73


state 49

    (19) B -> WRITE E WRITE_AUX . SEMICOLON V B

    SEMICOLON       shift and go to state 74


state 50

    (38) E -> LEFT_PARENTESIS E . RIGHT_PARENTESIS E_AUX

    RIGHT_PARENTESIS shift and go to state 75


state 51

    (39) E -> CONSTANT E_AUX .

    COMA            reduce using rule 39 (E -> CONSTANT E_AUX .)
    SEMICOLON       reduce using rule 39 (E -> CONSTANT E_AUX .)
    RIGHT_PARENTESIS reduce using rule 39 (E -> CONSTANT E_AUX .)


state 52

    (41) E_AUX -> PLUS . E
    (38) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (39) E -> . CONSTANT E_AUX
    (40) E -> . ID INDICES E_AUX

    LEFT_PARENTESIS shift and go to state 32
    CONSTANT        shift and go to state 33
    ID              shift and go to state 34

    E                              shift and go to state 76

state 53

    (42) E_AUX -> STAR . E
    (38) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (39) E -> . CONSTANT E_AUX
    (40) E -> . ID INDICES E_AUX

    LEFT_PARENTESIS shift and go to state 32
    CONSTANT        shift and go to state 33
    ID              shift and go to state 34

    E                              shift and go to state 77

state 54

    (43) E_AUX -> SLASH . E
    (38) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (39) E -> . CONSTANT E_AUX
    (40) E -> . ID INDICES E_AUX

    LEFT_PARENTESIS shift and go to state 32
    CONSTANT        shift and go to state 33
    ID              shift and go to state 34

    E                              shift and go to state 78

state 55

    (44) E_AUX -> MINUS . E
    (38) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (39) E -> . CONSTANT E_AUX
    (40) E -> . ID INDICES E_AUX

    LEFT_PARENTESIS shift and go to state 32
    CONSTANT        shift and go to state 33
    ID              shift and go to state 34

    E                              shift and go to state 79

state 56

    (40) E -> ID INDICES . E_AUX
    (41) E_AUX -> . PLUS E
    (42) E_AUX -> . STAR E
    (43) E_AUX -> . SLASH E
    (44) E_AUX -> . MINUS E
    (45) E_AUX -> .

    PLUS            shift and go to state 52
    STAR            shift and go to state 53
    SLASH           shift and go to state 54
    MINUS           shift and go to state 55
    COMA            reduce using rule 45 (E_AUX -> .)
    SEMICOLON       reduce using rule 45 (E_AUX -> .)
    RIGHT_PARENTESIS reduce using rule 45 (E_AUX -> .)

    E_AUX                          shift and go to state 80

state 57

    (33) EL -> LEFT_PARENTESIS . EL RIGHT_PARENTESIS EL_AUX
    (33) EL -> . LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX
    (34) EL -> . CONSTANT EL_AUX
    (35) EL -> . ID EL_AUX

    LEFT_PARENTESIS shift and go to state 57
    CONSTANT        shift and go to state 59
    ID              shift and go to state 60

    EL                             shift and go to state 81

state 58

    (20) B -> IF LEFT_PARENTESIS EL . RIGHT_PARENTESIS B ELSE_AUX ENDIF V B

    RIGHT_PARENTESIS shift and go to state 82


state 59

    (34) EL -> CONSTANT . EL_AUX
    (36) EL_AUX -> . COMPARISON EL
    (37) EL_AUX -> .

    COMPARISON      shift and go to state 84
    RIGHT_PARENTESIS reduce using rule 37 (EL_AUX -> .)
    COMA            reduce using rule 37 (EL_AUX -> .)

    EL_AUX                         shift and go to state 83

state 60

    (35) EL -> ID . EL_AUX
    (36) EL_AUX -> . COMPARISON EL
    (37) EL_AUX -> .

    COMPARISON      shift and go to state 84
    RIGHT_PARENTESIS reduce using rule 37 (EL_AUX -> .)
    COMA            reduce using rule 37 (EL_AUX -> .)

    EL_AUX                         shift and go to state 85

state 61

    (21) B -> WHILE LEFT_PARENTESIS EL . RIGHT_PARENTESIS V B ENDWHILE V B

    RIGHT_PARENTESIS shift and go to state 86


state 62

    (22) B -> FOR LEFT_PARENTESIS EL . COMA B RIGHT_PARENTESIS V B ENDFOR V B

    COMA            shift and go to state 87


state 63

    (2) V -> BE VARIABLES SEMICOLON B . V
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

  ! shift/reduce conflict for BE resolved as shift
    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)
    ELSE            reduce using rule 3 (V -> .)
    ENDIF           reduce using rule 3 (V -> .)
    RIGHT_PARENTESIS reduce using rule 3 (V -> .)
    ENDWHILE        reduce using rule 3 (V -> .)
    ENDFOR          reduce using rule 3 (V -> .)

  ! BE              [ reduce using rule 3 (V -> .) ]

    V                              shift and go to state 88

state 64

    (6) VARIABLES -> T ID LEFT_PARENTESIS . CONSTANT RIGHT_PARENTESIS
    (7) VARIABLES -> T ID LEFT_PARENTESIS . CONSTANT COMA CONSTANT RIGHT_PARENTESIS
    (8) VARIABLES -> T ID LEFT_PARENTESIS . CONSTANT COMA CONSTANT COMA CONSTANT RIGHT_PARENTESIS

    CONSTANT        shift and go to state 89


state 65

    (13) R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B . RETURN R

    RETURN          shift and go to state 90


state 66

    (15) B -> CALL ID SEMICOLON V . B
    (15) B -> . CALL ID SEMICOLON V B
    (16) B -> . ID INDICES EQUAL E SEMICOLON V B
    (17) B -> . READ ID SEMICOLON V B
    (18) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (19) B -> . WRITE E WRITE_AUX SEMICOLON V B
    (20) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (21) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (22) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (23) B -> .

  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    BE              reduce using rule 23 (B -> .)
    FINISH          reduce using rule 23 (B -> .)
    RETURN          reduce using rule 23 (B -> .)
    ELSE            reduce using rule 23 (B -> .)
    ENDIF           reduce using rule 23 (B -> .)
    RIGHT_PARENTESIS reduce using rule 23 (B -> .)
    ENDWHILE        reduce using rule 23 (B -> .)
    ENDFOR          reduce using rule 23 (B -> .)

  ! CALL            [ reduce using rule 23 (B -> .) ]
  ! ID              [ reduce using rule 23 (B -> .) ]
  ! READ            [ reduce using rule 23 (B -> .) ]
  ! WRITE           [ reduce using rule 23 (B -> .) ]
  ! IF              [ reduce using rule 23 (B -> .) ]
  ! WHILE           [ reduce using rule 23 (B -> .) ]
  ! FOR             [ reduce using rule 23 (B -> .) ]

    B                              shift and go to state 91

state 67

    (16) B -> ID INDICES EQUAL E . SEMICOLON V B

    SEMICOLON       shift and go to state 92


state 68

    (24) INDICES -> LEFT_PARENTESIS E RIGHT_PARENTESIS .

    EQUAL           reduce using rule 24 (INDICES -> LEFT_PARENTESIS E RIGHT_PARENTESIS .)
    PLUS            reduce using rule 24 (INDICES -> LEFT_PARENTESIS E RIGHT_PARENTESIS .)
    STAR            reduce using rule 24 (INDICES -> LEFT_PARENTESIS E RIGHT_PARENTESIS .)
    SLASH           reduce using rule 24 (INDICES -> LEFT_PARENTESIS E RIGHT_PARENTESIS .)
    MINUS           reduce using rule 24 (INDICES -> LEFT_PARENTESIS E RIGHT_PARENTESIS .)
    COMA            reduce using rule 24 (INDICES -> LEFT_PARENTESIS E RIGHT_PARENTESIS .)
    SEMICOLON       reduce using rule 24 (INDICES -> LEFT_PARENTESIS E RIGHT_PARENTESIS .)
    RIGHT_PARENTESIS reduce using rule 24 (INDICES -> LEFT_PARENTESIS E RIGHT_PARENTESIS .)


state 69

    (25) INDICES -> LEFT_PARENTESIS E COMA . E RIGHT_PARENTESIS
    (26) INDICES -> LEFT_PARENTESIS E COMA . E COMA E RIGHT_PARENTESIS
    (38) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (39) E -> . CONSTANT E_AUX
    (40) E -> . ID INDICES E_AUX

    LEFT_PARENTESIS shift and go to state 32
    CONSTANT        shift and go to state 33
    ID              shift and go to state 34

    E                              shift and go to state 93

state 70

    (17) B -> READ ID SEMICOLON V . B
    (15) B -> . CALL ID SEMICOLON V B
    (16) B -> . ID INDICES EQUAL E SEMICOLON V B
    (17) B -> . READ ID SEMICOLON V B
    (18) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (19) B -> . WRITE E WRITE_AUX SEMICOLON V B
    (20) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (21) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (22) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (23) B -> .

  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    BE              reduce using rule 23 (B -> .)
    FINISH          reduce using rule 23 (B -> .)
    RETURN          reduce using rule 23 (B -> .)
    ELSE            reduce using rule 23 (B -> .)
    ENDIF           reduce using rule 23 (B -> .)
    RIGHT_PARENTESIS reduce using rule 23 (B -> .)
    ENDWHILE        reduce using rule 23 (B -> .)
    ENDFOR          reduce using rule 23 (B -> .)

  ! CALL            [ reduce using rule 23 (B -> .) ]
  ! ID              [ reduce using rule 23 (B -> .) ]
  ! READ            [ reduce using rule 23 (B -> .) ]
  ! WRITE           [ reduce using rule 23 (B -> .) ]
  ! IF              [ reduce using rule 23 (B -> .) ]
  ! WHILE           [ reduce using rule 23 (B -> .) ]
  ! FOR             [ reduce using rule 23 (B -> .) ]

    B                              shift and go to state 94

state 71

    (18) B -> WRITE STRING WRITE_AUX SEMICOLON . V B
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

  ! shift/reduce conflict for BE resolved as shift
    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)
    ELSE            reduce using rule 3 (V -> .)
    ENDIF           reduce using rule 3 (V -> .)
    RIGHT_PARENTESIS reduce using rule 3 (V -> .)
    ENDWHILE        reduce using rule 3 (V -> .)
    ENDFOR          reduce using rule 3 (V -> .)

  ! BE              [ reduce using rule 3 (V -> .) ]

    V                              shift and go to state 95

state 72

    (30) WRITE_AUX -> COMA STRING . WRITE_AUX
    (30) WRITE_AUX -> . COMA STRING WRITE_AUX
    (31) WRITE_AUX -> . COMA ID INDICES WRITE_AUX
    (32) WRITE_AUX -> .

    COMA            shift and go to state 48
    SEMICOLON       reduce using rule 32 (WRITE_AUX -> .)

    WRITE_AUX                      shift and go to state 96

state 73

    (31) WRITE_AUX -> COMA ID . INDICES WRITE_AUX
    (24) INDICES -> . LEFT_PARENTESIS E RIGHT_PARENTESIS
    (25) INDICES -> . LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS
    (26) INDICES -> . LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS
    (27) INDICES -> .

    LEFT_PARENTESIS shift and go to state 28
    COMA            reduce using rule 27 (INDICES -> .)
    SEMICOLON       reduce using rule 27 (INDICES -> .)

    INDICES                        shift and go to state 97

state 74

    (19) B -> WRITE E WRITE_AUX SEMICOLON . V B
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

  ! shift/reduce conflict for BE resolved as shift
    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)
    ELSE            reduce using rule 3 (V -> .)
    ENDIF           reduce using rule 3 (V -> .)
    RIGHT_PARENTESIS reduce using rule 3 (V -> .)
    ENDWHILE        reduce using rule 3 (V -> .)
    ENDFOR          reduce using rule 3 (V -> .)

  ! BE              [ reduce using rule 3 (V -> .) ]

    V                              shift and go to state 98

state 75

    (38) E -> LEFT_PARENTESIS E RIGHT_PARENTESIS . E_AUX
    (41) E_AUX -> . PLUS E
    (42) E_AUX -> . STAR E
    (43) E_AUX -> . SLASH E
    (44) E_AUX -> . MINUS E
    (45) E_AUX -> .

    PLUS            shift and go to state 52
    STAR            shift and go to state 53
    SLASH           shift and go to state 54
    MINUS           shift and go to state 55
    COMA            reduce using rule 45 (E_AUX -> .)
    SEMICOLON       reduce using rule 45 (E_AUX -> .)
    RIGHT_PARENTESIS reduce using rule 45 (E_AUX -> .)

    E_AUX                          shift and go to state 99

state 76

    (41) E_AUX -> PLUS E .

    COMA            reduce using rule 41 (E_AUX -> PLUS E .)
    SEMICOLON       reduce using rule 41 (E_AUX -> PLUS E .)
    RIGHT_PARENTESIS reduce using rule 41 (E_AUX -> PLUS E .)


state 77

    (42) E_AUX -> STAR E .

    COMA            reduce using rule 42 (E_AUX -> STAR E .)
    SEMICOLON       reduce using rule 42 (E_AUX -> STAR E .)
    RIGHT_PARENTESIS reduce using rule 42 (E_AUX -> STAR E .)


state 78

    (43) E_AUX -> SLASH E .

    COMA            reduce using rule 43 (E_AUX -> SLASH E .)
    SEMICOLON       reduce using rule 43 (E_AUX -> SLASH E .)
    RIGHT_PARENTESIS reduce using rule 43 (E_AUX -> SLASH E .)


state 79

    (44) E_AUX -> MINUS E .

    COMA            reduce using rule 44 (E_AUX -> MINUS E .)
    SEMICOLON       reduce using rule 44 (E_AUX -> MINUS E .)
    RIGHT_PARENTESIS reduce using rule 44 (E_AUX -> MINUS E .)


state 80

    (40) E -> ID INDICES E_AUX .

    COMA            reduce using rule 40 (E -> ID INDICES E_AUX .)
    SEMICOLON       reduce using rule 40 (E -> ID INDICES E_AUX .)
    RIGHT_PARENTESIS reduce using rule 40 (E -> ID INDICES E_AUX .)


state 81

    (33) EL -> LEFT_PARENTESIS EL . RIGHT_PARENTESIS EL_AUX

    RIGHT_PARENTESIS shift and go to state 100


state 82

    (20) B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS . B ELSE_AUX ENDIF V B
    (15) B -> . CALL ID SEMICOLON V B
    (16) B -> . ID INDICES EQUAL E SEMICOLON V B
    (17) B -> . READ ID SEMICOLON V B
    (18) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (19) B -> . WRITE E WRITE_AUX SEMICOLON V B
    (20) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (21) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (22) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (23) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    ELSE            reduce using rule 23 (B -> .)
    ENDIF           reduce using rule 23 (B -> .)

    B                              shift and go to state 101

state 83

    (34) EL -> CONSTANT EL_AUX .

    RIGHT_PARENTESIS reduce using rule 34 (EL -> CONSTANT EL_AUX .)
    COMA            reduce using rule 34 (EL -> CONSTANT EL_AUX .)


state 84

    (36) EL_AUX -> COMPARISON . EL
    (33) EL -> . LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX
    (34) EL -> . CONSTANT EL_AUX
    (35) EL -> . ID EL_AUX

    LEFT_PARENTESIS shift and go to state 57
    CONSTANT        shift and go to state 59
    ID              shift and go to state 60

    EL                             shift and go to state 102

state 85

    (35) EL -> ID EL_AUX .

    RIGHT_PARENTESIS reduce using rule 35 (EL -> ID EL_AUX .)
    COMA            reduce using rule 35 (EL -> ID EL_AUX .)


state 86

    (21) B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS . V B ENDWHILE V B
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    ENDWHILE        reduce using rule 3 (V -> .)

    V                              shift and go to state 103

state 87

    (22) B -> FOR LEFT_PARENTESIS EL COMA . B RIGHT_PARENTESIS V B ENDFOR V B
    (15) B -> . CALL ID SEMICOLON V B
    (16) B -> . ID INDICES EQUAL E SEMICOLON V B
    (17) B -> . READ ID SEMICOLON V B
    (18) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (19) B -> . WRITE E WRITE_AUX SEMICOLON V B
    (20) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (21) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (22) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (23) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    RIGHT_PARENTESIS reduce using rule 23 (B -> .)

    B                              shift and go to state 104

state 88

    (2) V -> BE VARIABLES SEMICOLON B V .

    CALL            reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    ID              reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    READ            reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    WRITE           reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    IF              reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    WHILE           reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    FOR             reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    FINISH          reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    RETURN          reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    BE              reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    ELSE            reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    ENDIF           reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    RIGHT_PARENTESIS reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    ENDWHILE        reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)
    ENDFOR          reduce using rule 2 (V -> BE VARIABLES SEMICOLON B V .)


state 89

    (6) VARIABLES -> T ID LEFT_PARENTESIS CONSTANT . RIGHT_PARENTESIS
    (7) VARIABLES -> T ID LEFT_PARENTESIS CONSTANT . COMA CONSTANT RIGHT_PARENTESIS
    (8) VARIABLES -> T ID LEFT_PARENTESIS CONSTANT . COMA CONSTANT COMA CONSTANT RIGHT_PARENTESIS

    RIGHT_PARENTESIS shift and go to state 105
    COMA            shift and go to state 106


state 90

    (13) R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN . R
    (13) R -> . ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN R
    (14) R -> .

    ROUTINE         shift and go to state 3
    START           reduce using rule 14 (R -> .)
    $end            reduce using rule 14 (R -> .)

    R                              shift and go to state 107

state 91

    (15) B -> CALL ID SEMICOLON V B .

    FINISH          reduce using rule 15 (B -> CALL ID SEMICOLON V B .)
    BE              reduce using rule 15 (B -> CALL ID SEMICOLON V B .)
    CALL            reduce using rule 15 (B -> CALL ID SEMICOLON V B .)
    ID              reduce using rule 15 (B -> CALL ID SEMICOLON V B .)
    READ            reduce using rule 15 (B -> CALL ID SEMICOLON V B .)
    WRITE           reduce using rule 15 (B -> CALL ID SEMICOLON V B .)
    IF              reduce using rule 15 (B -> CALL ID SEMICOLON V B .)
    WHILE           reduce using rule 15 (B -> CALL ID SEMICOLON V B .)
    FOR             reduce using rule 15 (B -> CALL ID SEMICOLON V B .)
    RETURN          reduce using rule 15 (B -> CALL ID SEMICOLON V B .)
    ELSE            reduce using rule 15 (B -> CALL ID SEMICOLON V B .)
    ENDIF           reduce using rule 15 (B -> CALL ID SEMICOLON V B .)
    RIGHT_PARENTESIS reduce using rule 15 (B -> CALL ID SEMICOLON V B .)
    ENDWHILE        reduce using rule 15 (B -> CALL ID SEMICOLON V B .)
    ENDFOR          reduce using rule 15 (B -> CALL ID SEMICOLON V B .)


state 92

    (16) B -> ID INDICES EQUAL E SEMICOLON . V B
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

  ! shift/reduce conflict for BE resolved as shift
    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)
    ELSE            reduce using rule 3 (V -> .)
    ENDIF           reduce using rule 3 (V -> .)
    RIGHT_PARENTESIS reduce using rule 3 (V -> .)
    ENDWHILE        reduce using rule 3 (V -> .)
    ENDFOR          reduce using rule 3 (V -> .)

  ! BE              [ reduce using rule 3 (V -> .) ]

    V                              shift and go to state 108

state 93

    (25) INDICES -> LEFT_PARENTESIS E COMA E . RIGHT_PARENTESIS
    (26) INDICES -> LEFT_PARENTESIS E COMA E . COMA E RIGHT_PARENTESIS

    RIGHT_PARENTESIS shift and go to state 110
    COMA            shift and go to state 109


state 94

    (17) B -> READ ID SEMICOLON V B .

    FINISH          reduce using rule 17 (B -> READ ID SEMICOLON V B .)
    BE              reduce using rule 17 (B -> READ ID SEMICOLON V B .)
    CALL            reduce using rule 17 (B -> READ ID SEMICOLON V B .)
    ID              reduce using rule 17 (B -> READ ID SEMICOLON V B .)
    READ            reduce using rule 17 (B -> READ ID SEMICOLON V B .)
    WRITE           reduce using rule 17 (B -> READ ID SEMICOLON V B .)
    IF              reduce using rule 17 (B -> READ ID SEMICOLON V B .)
    WHILE           reduce using rule 17 (B -> READ ID SEMICOLON V B .)
    FOR             reduce using rule 17 (B -> READ ID SEMICOLON V B .)
    RETURN          reduce using rule 17 (B -> READ ID SEMICOLON V B .)
    ELSE            reduce using rule 17 (B -> READ ID SEMICOLON V B .)
    ENDIF           reduce using rule 17 (B -> READ ID SEMICOLON V B .)
    RIGHT_PARENTESIS reduce using rule 17 (B -> READ ID SEMICOLON V B .)
    ENDWHILE        reduce using rule 17 (B -> READ ID SEMICOLON V B .)
    ENDFOR          reduce using rule 17 (B -> READ ID SEMICOLON V B .)


state 95

    (18) B -> WRITE STRING WRITE_AUX SEMICOLON V . B
    (15) B -> . CALL ID SEMICOLON V B
    (16) B -> . ID INDICES EQUAL E SEMICOLON V B
    (17) B -> . READ ID SEMICOLON V B
    (18) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (19) B -> . WRITE E WRITE_AUX SEMICOLON V B
    (20) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (21) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (22) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (23) B -> .

  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    BE              reduce using rule 23 (B -> .)
    FINISH          reduce using rule 23 (B -> .)
    RETURN          reduce using rule 23 (B -> .)
    ELSE            reduce using rule 23 (B -> .)
    ENDIF           reduce using rule 23 (B -> .)
    RIGHT_PARENTESIS reduce using rule 23 (B -> .)
    ENDWHILE        reduce using rule 23 (B -> .)
    ENDFOR          reduce using rule 23 (B -> .)

  ! CALL            [ reduce using rule 23 (B -> .) ]
  ! ID              [ reduce using rule 23 (B -> .) ]
  ! READ            [ reduce using rule 23 (B -> .) ]
  ! WRITE           [ reduce using rule 23 (B -> .) ]
  ! IF              [ reduce using rule 23 (B -> .) ]
  ! WHILE           [ reduce using rule 23 (B -> .) ]
  ! FOR             [ reduce using rule 23 (B -> .) ]

    B                              shift and go to state 111

state 96

    (30) WRITE_AUX -> COMA STRING WRITE_AUX .

    SEMICOLON       reduce using rule 30 (WRITE_AUX -> COMA STRING WRITE_AUX .)


state 97

    (31) WRITE_AUX -> COMA ID INDICES . WRITE_AUX
    (30) WRITE_AUX -> . COMA STRING WRITE_AUX
    (31) WRITE_AUX -> . COMA ID INDICES WRITE_AUX
    (32) WRITE_AUX -> .

    COMA            shift and go to state 48
    SEMICOLON       reduce using rule 32 (WRITE_AUX -> .)

    WRITE_AUX                      shift and go to state 112

state 98

    (19) B -> WRITE E WRITE_AUX SEMICOLON V . B
    (15) B -> . CALL ID SEMICOLON V B
    (16) B -> . ID INDICES EQUAL E SEMICOLON V B
    (17) B -> . READ ID SEMICOLON V B
    (18) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (19) B -> . WRITE E WRITE_AUX SEMICOLON V B
    (20) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (21) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (22) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (23) B -> .

  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    BE              reduce using rule 23 (B -> .)
    FINISH          reduce using rule 23 (B -> .)
    RETURN          reduce using rule 23 (B -> .)
    ELSE            reduce using rule 23 (B -> .)
    ENDIF           reduce using rule 23 (B -> .)
    RIGHT_PARENTESIS reduce using rule 23 (B -> .)
    ENDWHILE        reduce using rule 23 (B -> .)
    ENDFOR          reduce using rule 23 (B -> .)

  ! CALL            [ reduce using rule 23 (B -> .) ]
  ! ID              [ reduce using rule 23 (B -> .) ]
  ! READ            [ reduce using rule 23 (B -> .) ]
  ! WRITE           [ reduce using rule 23 (B -> .) ]
  ! IF              [ reduce using rule 23 (B -> .) ]
  ! WHILE           [ reduce using rule 23 (B -> .) ]
  ! FOR             [ reduce using rule 23 (B -> .) ]

    B                              shift and go to state 113

state 99

    (38) E -> LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX .

    COMA            reduce using rule 38 (E -> LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX .)
    SEMICOLON       reduce using rule 38 (E -> LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX .)
    RIGHT_PARENTESIS reduce using rule 38 (E -> LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX .)


state 100

    (33) EL -> LEFT_PARENTESIS EL RIGHT_PARENTESIS . EL_AUX
    (36) EL_AUX -> . COMPARISON EL
    (37) EL_AUX -> .

    COMPARISON      shift and go to state 84
    RIGHT_PARENTESIS reduce using rule 37 (EL_AUX -> .)
    COMA            reduce using rule 37 (EL_AUX -> .)

    EL_AUX                         shift and go to state 114

state 101

    (20) B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B . ELSE_AUX ENDIF V B
    (28) ELSE_AUX -> . ELSE B
    (29) ELSE_AUX -> .

    ELSE            shift and go to state 116
    ENDIF           reduce using rule 29 (ELSE_AUX -> .)

    ELSE_AUX                       shift and go to state 115

state 102

    (36) EL_AUX -> COMPARISON EL .

    RIGHT_PARENTESIS reduce using rule 36 (EL_AUX -> COMPARISON EL .)
    COMA            reduce using rule 36 (EL_AUX -> COMPARISON EL .)


state 103

    (21) B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V . B ENDWHILE V B
    (15) B -> . CALL ID SEMICOLON V B
    (16) B -> . ID INDICES EQUAL E SEMICOLON V B
    (17) B -> . READ ID SEMICOLON V B
    (18) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (19) B -> . WRITE E WRITE_AUX SEMICOLON V B
    (20) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (21) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (22) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (23) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    ENDWHILE        reduce using rule 23 (B -> .)

    B                              shift and go to state 117

state 104

    (22) B -> FOR LEFT_PARENTESIS EL COMA B . RIGHT_PARENTESIS V B ENDFOR V B

    RIGHT_PARENTESIS shift and go to state 118


state 105

    (6) VARIABLES -> T ID LEFT_PARENTESIS CONSTANT RIGHT_PARENTESIS .

    SEMICOLON       reduce using rule 6 (VARIABLES -> T ID LEFT_PARENTESIS CONSTANT RIGHT_PARENTESIS .)


state 106

    (7) VARIABLES -> T ID LEFT_PARENTESIS CONSTANT COMA . CONSTANT RIGHT_PARENTESIS
    (8) VARIABLES -> T ID LEFT_PARENTESIS CONSTANT COMA . CONSTANT COMA CONSTANT RIGHT_PARENTESIS

    CONSTANT        shift and go to state 119


state 107

    (13) R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN R .

    START           reduce using rule 13 (R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN R .)
    $end            reduce using rule 13 (R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN R .)


state 108

    (16) B -> ID INDICES EQUAL E SEMICOLON V . B
    (15) B -> . CALL ID SEMICOLON V B
    (16) B -> . ID INDICES EQUAL E SEMICOLON V B
    (17) B -> . READ ID SEMICOLON V B
    (18) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (19) B -> . WRITE E WRITE_AUX SEMICOLON V B
    (20) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (21) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (22) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (23) B -> .

  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    BE              reduce using rule 23 (B -> .)
    FINISH          reduce using rule 23 (B -> .)
    RETURN          reduce using rule 23 (B -> .)
    ELSE            reduce using rule 23 (B -> .)
    ENDIF           reduce using rule 23 (B -> .)
    RIGHT_PARENTESIS reduce using rule 23 (B -> .)
    ENDWHILE        reduce using rule 23 (B -> .)
    ENDFOR          reduce using rule 23 (B -> .)

  ! CALL            [ reduce using rule 23 (B -> .) ]
  ! ID              [ reduce using rule 23 (B -> .) ]
  ! READ            [ reduce using rule 23 (B -> .) ]
  ! WRITE           [ reduce using rule 23 (B -> .) ]
  ! IF              [ reduce using rule 23 (B -> .) ]
  ! WHILE           [ reduce using rule 23 (B -> .) ]
  ! FOR             [ reduce using rule 23 (B -> .) ]

    B                              shift and go to state 120

state 109

    (26) INDICES -> LEFT_PARENTESIS E COMA E COMA . E RIGHT_PARENTESIS
    (38) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (39) E -> . CONSTANT E_AUX
    (40) E -> . ID INDICES E_AUX

    LEFT_PARENTESIS shift and go to state 32
    CONSTANT        shift and go to state 33
    ID              shift and go to state 34

    E                              shift and go to state 121

state 110

    (25) INDICES -> LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS .

    EQUAL           reduce using rule 25 (INDICES -> LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS .)
    PLUS            reduce using rule 25 (INDICES -> LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS .)
    STAR            reduce using rule 25 (INDICES -> LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS .)
    SLASH           reduce using rule 25 (INDICES -> LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS .)
    MINUS           reduce using rule 25 (INDICES -> LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS .)
    COMA            reduce using rule 25 (INDICES -> LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS .)
    SEMICOLON       reduce using rule 25 (INDICES -> LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS .)
    RIGHT_PARENTESIS reduce using rule 25 (INDICES -> LEFT_PARENTESIS E COMA E RIGHT_PARENTESIS .)


state 111

    (18) B -> WRITE STRING WRITE_AUX SEMICOLON V B .

    FINISH          reduce using rule 18 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    BE              reduce using rule 18 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    CALL            reduce using rule 18 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    ID              reduce using rule 18 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    READ            reduce using rule 18 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    WRITE           reduce using rule 18 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    IF              reduce using rule 18 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    WHILE           reduce using rule 18 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    FOR             reduce using rule 18 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    RETURN          reduce using rule 18 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    ELSE            reduce using rule 18 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    ENDIF           reduce using rule 18 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    RIGHT_PARENTESIS reduce using rule 18 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    ENDWHILE        reduce using rule 18 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)
    ENDFOR          reduce using rule 18 (B -> WRITE STRING WRITE_AUX SEMICOLON V B .)


state 112

    (31) WRITE_AUX -> COMA ID INDICES WRITE_AUX .

    SEMICOLON       reduce using rule 31 (WRITE_AUX -> COMA ID INDICES WRITE_AUX .)


state 113

    (19) B -> WRITE E WRITE_AUX SEMICOLON V B .

    FINISH          reduce using rule 19 (B -> WRITE E WRITE_AUX SEMICOLON V B .)
    BE              reduce using rule 19 (B -> WRITE E WRITE_AUX SEMICOLON V B .)
    CALL            reduce using rule 19 (B -> WRITE E WRITE_AUX SEMICOLON V B .)
    ID              reduce using rule 19 (B -> WRITE E WRITE_AUX SEMICOLON V B .)
    READ            reduce using rule 19 (B -> WRITE E WRITE_AUX SEMICOLON V B .)
    WRITE           reduce using rule 19 (B -> WRITE E WRITE_AUX SEMICOLON V B .)
    IF              reduce using rule 19 (B -> WRITE E WRITE_AUX SEMICOLON V B .)
    WHILE           reduce using rule 19 (B -> WRITE E WRITE_AUX SEMICOLON V B .)
    FOR             reduce using rule 19 (B -> WRITE E WRITE_AUX SEMICOLON V B .)
    RETURN          reduce using rule 19 (B -> WRITE E WRITE_AUX SEMICOLON V B .)
    ELSE            reduce using rule 19 (B -> WRITE E WRITE_AUX SEMICOLON V B .)
    ENDIF           reduce using rule 19 (B -> WRITE E WRITE_AUX SEMICOLON V B .)
    RIGHT_PARENTESIS reduce using rule 19 (B -> WRITE E WRITE_AUX SEMICOLON V B .)
    ENDWHILE        reduce using rule 19 (B -> WRITE E WRITE_AUX SEMICOLON V B .)
    ENDFOR          reduce using rule 19 (B -> WRITE E WRITE_AUX SEMICOLON V B .)


state 114

    (33) EL -> LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX .

    RIGHT_PARENTESIS reduce using rule 33 (EL -> LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX .)
    COMA            reduce using rule 33 (EL -> LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX .)


state 115

    (20) B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX . ENDIF V B

    ENDIF           shift and go to state 122


state 116

    (28) ELSE_AUX -> ELSE . B
    (15) B -> . CALL ID SEMICOLON V B
    (16) B -> . ID INDICES EQUAL E SEMICOLON V B
    (17) B -> . READ ID SEMICOLON V B
    (18) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (19) B -> . WRITE E WRITE_AUX SEMICOLON V B
    (20) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (21) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (22) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (23) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    ENDIF           reduce using rule 23 (B -> .)

    B                              shift and go to state 123

state 117

    (21) B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B . ENDWHILE V B

    ENDWHILE        shift and go to state 124


state 118

    (22) B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS . V B ENDFOR V B
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    ENDFOR          reduce using rule 3 (V -> .)

    V                              shift and go to state 125

state 119

    (7) VARIABLES -> T ID LEFT_PARENTESIS CONSTANT COMA CONSTANT . RIGHT_PARENTESIS
    (8) VARIABLES -> T ID LEFT_PARENTESIS CONSTANT COMA CONSTANT . COMA CONSTANT RIGHT_PARENTESIS

    RIGHT_PARENTESIS shift and go to state 127
    COMA            shift and go to state 126


state 120

    (16) B -> ID INDICES EQUAL E SEMICOLON V B .

    FINISH          reduce using rule 16 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    BE              reduce using rule 16 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    CALL            reduce using rule 16 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    ID              reduce using rule 16 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    READ            reduce using rule 16 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    WRITE           reduce using rule 16 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    IF              reduce using rule 16 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    WHILE           reduce using rule 16 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    FOR             reduce using rule 16 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    RETURN          reduce using rule 16 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    ELSE            reduce using rule 16 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    ENDIF           reduce using rule 16 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    RIGHT_PARENTESIS reduce using rule 16 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    ENDWHILE        reduce using rule 16 (B -> ID INDICES EQUAL E SEMICOLON V B .)
    ENDFOR          reduce using rule 16 (B -> ID INDICES EQUAL E SEMICOLON V B .)


state 121

    (26) INDICES -> LEFT_PARENTESIS E COMA E COMA E . RIGHT_PARENTESIS

    RIGHT_PARENTESIS shift and go to state 128


state 122

    (20) B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF . V B
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

  ! shift/reduce conflict for BE resolved as shift
    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)
    ELSE            reduce using rule 3 (V -> .)
    ENDIF           reduce using rule 3 (V -> .)
    RIGHT_PARENTESIS reduce using rule 3 (V -> .)
    ENDWHILE        reduce using rule 3 (V -> .)
    ENDFOR          reduce using rule 3 (V -> .)

  ! BE              [ reduce using rule 3 (V -> .) ]

    V                              shift and go to state 129

state 123

    (28) ELSE_AUX -> ELSE B .

    ENDIF           reduce using rule 28 (ELSE_AUX -> ELSE B .)


state 124

    (21) B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE . V B
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

  ! shift/reduce conflict for BE resolved as shift
    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)
    ELSE            reduce using rule 3 (V -> .)
    ENDIF           reduce using rule 3 (V -> .)
    RIGHT_PARENTESIS reduce using rule 3 (V -> .)
    ENDWHILE        reduce using rule 3 (V -> .)
    ENDFOR          reduce using rule 3 (V -> .)

  ! BE              [ reduce using rule 3 (V -> .) ]

    V                              shift and go to state 130

state 125

    (22) B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V . B ENDFOR V B
    (15) B -> . CALL ID SEMICOLON V B
    (16) B -> . ID INDICES EQUAL E SEMICOLON V B
    (17) B -> . READ ID SEMICOLON V B
    (18) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (19) B -> . WRITE E WRITE_AUX SEMICOLON V B
    (20) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (21) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (22) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (23) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    ENDFOR          reduce using rule 23 (B -> .)

    B                              shift and go to state 131

state 126

    (8) VARIABLES -> T ID LEFT_PARENTESIS CONSTANT COMA CONSTANT COMA . CONSTANT RIGHT_PARENTESIS

    CONSTANT        shift and go to state 132


state 127

    (7) VARIABLES -> T ID LEFT_PARENTESIS CONSTANT COMA CONSTANT RIGHT_PARENTESIS .

    SEMICOLON       reduce using rule 7 (VARIABLES -> T ID LEFT_PARENTESIS CONSTANT COMA CONSTANT RIGHT_PARENTESIS .)


state 128

    (26) INDICES -> LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS .

    EQUAL           reduce using rule 26 (INDICES -> LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS .)
    PLUS            reduce using rule 26 (INDICES -> LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS .)
    STAR            reduce using rule 26 (INDICES -> LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS .)
    SLASH           reduce using rule 26 (INDICES -> LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS .)
    MINUS           reduce using rule 26 (INDICES -> LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS .)
    COMA            reduce using rule 26 (INDICES -> LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS .)
    SEMICOLON       reduce using rule 26 (INDICES -> LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS .)
    RIGHT_PARENTESIS reduce using rule 26 (INDICES -> LEFT_PARENTESIS E COMA E COMA E RIGHT_PARENTESIS .)


state 129

    (20) B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V . B
    (15) B -> . CALL ID SEMICOLON V B
    (16) B -> . ID INDICES EQUAL E SEMICOLON V B
    (17) B -> . READ ID SEMICOLON V B
    (18) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (19) B -> . WRITE E WRITE_AUX SEMICOLON V B
    (20) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (21) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (22) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (23) B -> .

  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    BE              reduce using rule 23 (B -> .)
    FINISH          reduce using rule 23 (B -> .)
    RETURN          reduce using rule 23 (B -> .)
    ELSE            reduce using rule 23 (B -> .)
    ENDIF           reduce using rule 23 (B -> .)
    RIGHT_PARENTESIS reduce using rule 23 (B -> .)
    ENDWHILE        reduce using rule 23 (B -> .)
    ENDFOR          reduce using rule 23 (B -> .)

  ! CALL            [ reduce using rule 23 (B -> .) ]
  ! ID              [ reduce using rule 23 (B -> .) ]
  ! READ            [ reduce using rule 23 (B -> .) ]
  ! WRITE           [ reduce using rule 23 (B -> .) ]
  ! IF              [ reduce using rule 23 (B -> .) ]
  ! WHILE           [ reduce using rule 23 (B -> .) ]
  ! FOR             [ reduce using rule 23 (B -> .) ]

    B                              shift and go to state 133

state 130

    (21) B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V . B
    (15) B -> . CALL ID SEMICOLON V B
    (16) B -> . ID INDICES EQUAL E SEMICOLON V B
    (17) B -> . READ ID SEMICOLON V B
    (18) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (19) B -> . WRITE E WRITE_AUX SEMICOLON V B
    (20) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (21) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (22) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (23) B -> .

  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    BE              reduce using rule 23 (B -> .)
    FINISH          reduce using rule 23 (B -> .)
    RETURN          reduce using rule 23 (B -> .)
    ELSE            reduce using rule 23 (B -> .)
    ENDIF           reduce using rule 23 (B -> .)
    RIGHT_PARENTESIS reduce using rule 23 (B -> .)
    ENDWHILE        reduce using rule 23 (B -> .)
    ENDFOR          reduce using rule 23 (B -> .)

  ! CALL            [ reduce using rule 23 (B -> .) ]
  ! ID              [ reduce using rule 23 (B -> .) ]
  ! READ            [ reduce using rule 23 (B -> .) ]
  ! WRITE           [ reduce using rule 23 (B -> .) ]
  ! IF              [ reduce using rule 23 (B -> .) ]
  ! WHILE           [ reduce using rule 23 (B -> .) ]
  ! FOR             [ reduce using rule 23 (B -> .) ]

    B                              shift and go to state 134

state 131

    (22) B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B . ENDFOR V B

    ENDFOR          shift and go to state 135


state 132

    (8) VARIABLES -> T ID LEFT_PARENTESIS CONSTANT COMA CONSTANT COMA CONSTANT . RIGHT_PARENTESIS

    RIGHT_PARENTESIS shift and go to state 136


state 133

    (20) B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .

    FINISH          reduce using rule 20 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    BE              reduce using rule 20 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    CALL            reduce using rule 20 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    ID              reduce using rule 20 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    READ            reduce using rule 20 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    WRITE           reduce using rule 20 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    IF              reduce using rule 20 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    WHILE           reduce using rule 20 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    FOR             reduce using rule 20 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    RETURN          reduce using rule 20 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    ELSE            reduce using rule 20 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    ENDIF           reduce using rule 20 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    RIGHT_PARENTESIS reduce using rule 20 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    ENDWHILE        reduce using rule 20 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)
    ENDFOR          reduce using rule 20 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B .)


state 134

    (21) B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .

    FINISH          reduce using rule 21 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    BE              reduce using rule 21 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    CALL            reduce using rule 21 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    ID              reduce using rule 21 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    READ            reduce using rule 21 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    WRITE           reduce using rule 21 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    IF              reduce using rule 21 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    WHILE           reduce using rule 21 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    FOR             reduce using rule 21 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    RETURN          reduce using rule 21 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    ELSE            reduce using rule 21 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    ENDIF           reduce using rule 21 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    RIGHT_PARENTESIS reduce using rule 21 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    ENDWHILE        reduce using rule 21 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)
    ENDFOR          reduce using rule 21 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B .)


state 135

    (22) B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR . V B
    (2) V -> . BE VARIABLES SEMICOLON B V
    (3) V -> .

  ! shift/reduce conflict for BE resolved as shift
    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)
    ELSE            reduce using rule 3 (V -> .)
    ENDIF           reduce using rule 3 (V -> .)
    RIGHT_PARENTESIS reduce using rule 3 (V -> .)
    ENDWHILE        reduce using rule 3 (V -> .)
    ENDFOR          reduce using rule 3 (V -> .)

  ! BE              [ reduce using rule 3 (V -> .) ]

    V                              shift and go to state 137

state 136

    (8) VARIABLES -> T ID LEFT_PARENTESIS CONSTANT COMA CONSTANT COMA CONSTANT RIGHT_PARENTESIS .

    SEMICOLON       reduce using rule 8 (VARIABLES -> T ID LEFT_PARENTESIS CONSTANT COMA CONSTANT COMA CONSTANT RIGHT_PARENTESIS .)


state 137

    (22) B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V . B
    (15) B -> . CALL ID SEMICOLON V B
    (16) B -> . ID INDICES EQUAL E SEMICOLON V B
    (17) B -> . READ ID SEMICOLON V B
    (18) B -> . WRITE STRING WRITE_AUX SEMICOLON V B
    (19) B -> . WRITE E WRITE_AUX SEMICOLON V B
    (20) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF V B
    (21) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS V B ENDWHILE V B
    (22) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B
    (23) B -> .

  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    BE              reduce using rule 23 (B -> .)
    FINISH          reduce using rule 23 (B -> .)
    RETURN          reduce using rule 23 (B -> .)
    ELSE            reduce using rule 23 (B -> .)
    ENDIF           reduce using rule 23 (B -> .)
    RIGHT_PARENTESIS reduce using rule 23 (B -> .)
    ENDWHILE        reduce using rule 23 (B -> .)
    ENDFOR          reduce using rule 23 (B -> .)

  ! CALL            [ reduce using rule 23 (B -> .) ]
  ! ID              [ reduce using rule 23 (B -> .) ]
  ! READ            [ reduce using rule 23 (B -> .) ]
  ! WRITE           [ reduce using rule 23 (B -> .) ]
  ! IF              [ reduce using rule 23 (B -> .) ]
  ! WHILE           [ reduce using rule 23 (B -> .) ]
  ! FOR             [ reduce using rule 23 (B -> .) ]

    B                              shift and go to state 138

state 138

    (22) B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .

    FINISH          reduce using rule 22 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    BE              reduce using rule 22 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    CALL            reduce using rule 22 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    ID              reduce using rule 22 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    READ            reduce using rule 22 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    WRITE           reduce using rule 22 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    IF              reduce using rule 22 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    WHILE           reduce using rule 22 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    FOR             reduce using rule 22 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    RETURN          reduce using rule 22 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    ELSE            reduce using rule 22 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    ENDIF           reduce using rule 22 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    RIGHT_PARENTESIS reduce using rule 22 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    ENDWHILE        reduce using rule 22 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)
    ENDFOR          reduce using rule 22 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS V B ENDFOR V B .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CALL in state 38 resolved as shift
WARNING: shift/reduce conflict for ID in state 38 resolved as shift
WARNING: shift/reduce conflict for READ in state 38 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 38 resolved as shift
WARNING: shift/reduce conflict for IF in state 38 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 38 resolved as shift
WARNING: shift/reduce conflict for FOR in state 38 resolved as shift
WARNING: shift/reduce conflict for BE in state 43 resolved as shift
WARNING: shift/reduce conflict for BE in state 46 resolved as shift
WARNING: shift/reduce conflict for BE in state 63 resolved as shift
WARNING: shift/reduce conflict for CALL in state 66 resolved as shift
WARNING: shift/reduce conflict for ID in state 66 resolved as shift
WARNING: shift/reduce conflict for READ in state 66 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 66 resolved as shift
WARNING: shift/reduce conflict for IF in state 66 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 66 resolved as shift
WARNING: shift/reduce conflict for FOR in state 66 resolved as shift
WARNING: shift/reduce conflict for CALL in state 70 resolved as shift
WARNING: shift/reduce conflict for ID in state 70 resolved as shift
WARNING: shift/reduce conflict for READ in state 70 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 70 resolved as shift
WARNING: shift/reduce conflict for IF in state 70 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 70 resolved as shift
WARNING: shift/reduce conflict for FOR in state 70 resolved as shift
WARNING: shift/reduce conflict for BE in state 71 resolved as shift
WARNING: shift/reduce conflict for BE in state 74 resolved as shift
WARNING: shift/reduce conflict for BE in state 92 resolved as shift
WARNING: shift/reduce conflict for CALL in state 95 resolved as shift
WARNING: shift/reduce conflict for ID in state 95 resolved as shift
WARNING: shift/reduce conflict for READ in state 95 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 95 resolved as shift
WARNING: shift/reduce conflict for IF in state 95 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 95 resolved as shift
WARNING: shift/reduce conflict for FOR in state 95 resolved as shift
WARNING: shift/reduce conflict for CALL in state 98 resolved as shift
WARNING: shift/reduce conflict for ID in state 98 resolved as shift
WARNING: shift/reduce conflict for READ in state 98 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 98 resolved as shift
WARNING: shift/reduce conflict for IF in state 98 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 98 resolved as shift
WARNING: shift/reduce conflict for FOR in state 98 resolved as shift
WARNING: shift/reduce conflict for CALL in state 108 resolved as shift
WARNING: shift/reduce conflict for ID in state 108 resolved as shift
WARNING: shift/reduce conflict for READ in state 108 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 108 resolved as shift
WARNING: shift/reduce conflict for IF in state 108 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 108 resolved as shift
WARNING: shift/reduce conflict for FOR in state 108 resolved as shift
WARNING: shift/reduce conflict for BE in state 122 resolved as shift
WARNING: shift/reduce conflict for BE in state 124 resolved as shift
WARNING: shift/reduce conflict for CALL in state 129 resolved as shift
WARNING: shift/reduce conflict for ID in state 129 resolved as shift
WARNING: shift/reduce conflict for READ in state 129 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 129 resolved as shift
WARNING: shift/reduce conflict for IF in state 129 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 129 resolved as shift
WARNING: shift/reduce conflict for FOR in state 129 resolved as shift
WARNING: shift/reduce conflict for CALL in state 130 resolved as shift
WARNING: shift/reduce conflict for ID in state 130 resolved as shift
WARNING: shift/reduce conflict for READ in state 130 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 130 resolved as shift
WARNING: shift/reduce conflict for IF in state 130 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 130 resolved as shift
WARNING: shift/reduce conflict for FOR in state 130 resolved as shift
WARNING: shift/reduce conflict for BE in state 135 resolved as shift
WARNING: shift/reduce conflict for CALL in state 137 resolved as shift
WARNING: shift/reduce conflict for ID in state 137 resolved as shift
WARNING: shift/reduce conflict for READ in state 137 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 137 resolved as shift
WARNING: shift/reduce conflict for IF in state 137 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 137 resolved as shift
WARNING: shift/reduce conflict for FOR in state 137 resolved as shift
