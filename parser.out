Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BOOLEAN_EXPRESSION
    EQUAL_EQUAL
    GREATER_THAN
    GREATER_THAN_EQUAL
    LENGTH_I
    LENGTH_J
    LENGTH_K
    LESS_THAN
    LESS_THAN_EQUAL
    MATHEMATICAL_CONSTANT
    MATHEMATICAL_EXPRESSION
    MEAN
    MEDIAN
    MODE
    NOT
    NOT_EQUAL
    OR
    RREF

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> R START V B FINISH R
Rule 2     V -> BE VARIABLES SEMICOLON
Rule 3     V -> <empty>
Rule 4     VARIABLES -> FLOAT ID
Rule 5     VARIABLES -> INT ID
Rule 6     VARIABLES -> VECTOR ID LEFT_PARENTESIS LENGTH RIGHT_PARENTESIS
Rule 7     VARIABLES -> MATRIX ID LEFT_PARENTESIS LENGTH COMA LENGTH RIGHT_PARENTESIS
Rule 8     VARIABLES -> CUBE ID LEFT_PARENTESIS LENGTH COMA LENGTH COMA LENGTH RIGHT_PARENTESIS
Rule 9     R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN
Rule 10    R -> <empty>
Rule 11    B -> CALL ID SEMICOLON
Rule 12    B -> ID EQUAL E SEMICOLON
Rule 13    B -> READ ID SEMICOLON
Rule 14    B -> WRITE STRING WRITE_AUX SEMICOLON
Rule 15    B -> WRITE ID WRITE_AUX SEMICOLON
Rule 16    B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF
Rule 17    B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS B ENDWHILE
Rule 18    B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS B ENDFOR
Rule 19    B -> <empty>
Rule 20    ELSE_AUX -> ELSE B
Rule 21    ELSE_AUX -> <empty>
Rule 22    WRITE_AUX -> COMA STRING WRITE_AUX
Rule 23    WRITE_AUX -> COMA ID WRITE_AUX
Rule 24    WRITE_AUX -> <empty>
Rule 25    EL -> LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX
Rule 26    EL -> CONSTANT EL_AUX
Rule 27    EL -> ID EL_AUX
Rule 28    EL_AUX -> COMPARISON E
Rule 29    EL_AUX -> <empty>
Rule 30    E -> LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
Rule 31    E -> CONSTANT E_AUX
Rule 32    E -> ID E_AUX
Rule 33    E_AUX -> PLUS E
Rule 34    E_AUX -> STAR E
Rule 35    E_AUX -> SLASH E
Rule 36    E_AUX -> MINUS E
Rule 37    E_AUX -> <empty>

Terminals, with rules where they appear

AND                  : 
BE                   : 2
BOOLEAN_EXPRESSION   : 
CALL                 : 11
COMA                 : 7 8 8 18 22 23
COMPARISON           : 28
CONSTANT             : 26 31
CUBE                 : 8
ELSE                 : 20
ENDFOR               : 18
ENDIF                : 16
ENDWHILE             : 17
EQUAL                : 12
EQUAL_EQUAL          : 
FINISH               : 1
FLOAT                : 4
FOR                  : 18
GREATER_THAN         : 
GREATER_THAN_EQUAL   : 
ID                   : 4 5 6 7 8 9 11 12 13 15 23 27 32
IF                   : 16
INT                  : 5
LEFT_PARENTESIS      : 6 7 8 9 16 17 18 25 30
LENGTH               : 6 7 7 8 8 8
LENGTH_I             : 
LENGTH_J             : 
LENGTH_K             : 
LESS_THAN            : 
LESS_THAN_EQUAL      : 
MATHEMATICAL_CONSTANT : 
MATHEMATICAL_EXPRESSION : 
MATRIX               : 7
MEAN                 : 
MEDIAN               : 
MINUS                : 36
MODE                 : 
NOT                  : 
NOT_EQUAL            : 
OR                   : 
PLUS                 : 33
READ                 : 13
RETURN               : 9
RIGHT_PARENTESIS     : 6 7 8 9 16 17 18 25 30
ROUTINE              : 9
RREF                 : 
SEMICOLON            : 2 11 12 13 14 15
SLASH                : 35
STAR                 : 34
START                : 1
STRING               : 14 22
VECTOR               : 6
WHILE                : 17
WRITE                : 14 15
error                : 

Nonterminals, with rules where they appear

B                    : 1 9 16 17 18 18 20
E                    : 12 28 30 33 34 35 36
EL                   : 16 17 18 25
ELSE_AUX             : 16
EL_AUX               : 25 26 27
E_AUX                : 30 31 32
PROGRAMA             : 0
R                    : 1 1
V                    : 1 9
VARIABLES            : 2
WRITE_AUX            : 14 15 22 23

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . R START V B FINISH R
    (9) R -> . ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN
    (10) R -> .

    ROUTINE         shift and go to state 3
    START           reduce using rule 10 (R -> .)

    PROGRAMA                       shift and go to state 1
    R                              shift and go to state 2

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> R . START V B FINISH R

    START           shift and go to state 4


state 3

    (9) R -> ROUTINE . LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN

    LEFT_PARENTESIS shift and go to state 5


state 4

    (1) PROGRAMA -> R START . V B FINISH R
    (2) V -> . BE VARIABLES SEMICOLON
    (3) V -> .

    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    FINISH          reduce using rule 3 (V -> .)

    V                              shift and go to state 6

state 5

    (9) R -> ROUTINE LEFT_PARENTESIS . ID RIGHT_PARENTESIS V B RETURN

    ID              shift and go to state 8


state 6

    (1) PROGRAMA -> R START V . B FINISH R
    (11) B -> . CALL ID SEMICOLON
    (12) B -> . ID EQUAL E SEMICOLON
    (13) B -> . READ ID SEMICOLON
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON
    (15) B -> . WRITE ID WRITE_AUX SEMICOLON
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS B ENDWHILE
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS B ENDFOR
    (19) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    FINISH          reduce using rule 19 (B -> .)

    B                              shift and go to state 9

state 7

    (2) V -> BE . VARIABLES SEMICOLON
    (4) VARIABLES -> . FLOAT ID
    (5) VARIABLES -> . INT ID
    (6) VARIABLES -> . VECTOR ID LEFT_PARENTESIS LENGTH RIGHT_PARENTESIS
    (7) VARIABLES -> . MATRIX ID LEFT_PARENTESIS LENGTH COMA LENGTH RIGHT_PARENTESIS
    (8) VARIABLES -> . CUBE ID LEFT_PARENTESIS LENGTH COMA LENGTH COMA LENGTH RIGHT_PARENTESIS

    FLOAT           shift and go to state 18
    INT             shift and go to state 19
    VECTOR          shift and go to state 20
    MATRIX          shift and go to state 21
    CUBE            shift and go to state 22

    VARIABLES                      shift and go to state 17

state 8

    (9) R -> ROUTINE LEFT_PARENTESIS ID . RIGHT_PARENTESIS V B RETURN

    RIGHT_PARENTESIS shift and go to state 23


state 9

    (1) PROGRAMA -> R START V B . FINISH R

    FINISH          shift and go to state 24


state 10

    (11) B -> CALL . ID SEMICOLON

    ID              shift and go to state 25


state 11

    (12) B -> ID . EQUAL E SEMICOLON

    EQUAL           shift and go to state 26


state 12

    (13) B -> READ . ID SEMICOLON

    ID              shift and go to state 27


state 13

    (14) B -> WRITE . STRING WRITE_AUX SEMICOLON
    (15) B -> WRITE . ID WRITE_AUX SEMICOLON

    STRING          shift and go to state 28
    ID              shift and go to state 29


state 14

    (16) B -> IF . LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF

    LEFT_PARENTESIS shift and go to state 30


state 15

    (17) B -> WHILE . LEFT_PARENTESIS EL RIGHT_PARENTESIS B ENDWHILE

    LEFT_PARENTESIS shift and go to state 31


state 16

    (18) B -> FOR . LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS B ENDFOR

    LEFT_PARENTESIS shift and go to state 32


state 17

    (2) V -> BE VARIABLES . SEMICOLON

    SEMICOLON       shift and go to state 33


state 18

    (4) VARIABLES -> FLOAT . ID

    ID              shift and go to state 34


state 19

    (5) VARIABLES -> INT . ID

    ID              shift and go to state 35


state 20

    (6) VARIABLES -> VECTOR . ID LEFT_PARENTESIS LENGTH RIGHT_PARENTESIS

    ID              shift and go to state 36


state 21

    (7) VARIABLES -> MATRIX . ID LEFT_PARENTESIS LENGTH COMA LENGTH RIGHT_PARENTESIS

    ID              shift and go to state 37


state 22

    (8) VARIABLES -> CUBE . ID LEFT_PARENTESIS LENGTH COMA LENGTH COMA LENGTH RIGHT_PARENTESIS

    ID              shift and go to state 38


state 23

    (9) R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS . V B RETURN
    (2) V -> . BE VARIABLES SEMICOLON
    (3) V -> .

    BE              shift and go to state 7
    CALL            reduce using rule 3 (V -> .)
    ID              reduce using rule 3 (V -> .)
    READ            reduce using rule 3 (V -> .)
    WRITE           reduce using rule 3 (V -> .)
    IF              reduce using rule 3 (V -> .)
    WHILE           reduce using rule 3 (V -> .)
    FOR             reduce using rule 3 (V -> .)
    RETURN          reduce using rule 3 (V -> .)

    V                              shift and go to state 39

state 24

    (1) PROGRAMA -> R START V B FINISH . R
    (9) R -> . ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN
    (10) R -> .

    ROUTINE         shift and go to state 3
    $end            reduce using rule 10 (R -> .)

    R                              shift and go to state 40

state 25

    (11) B -> CALL ID . SEMICOLON

    SEMICOLON       shift and go to state 41


state 26

    (12) B -> ID EQUAL . E SEMICOLON
    (30) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (31) E -> . CONSTANT E_AUX
    (32) E -> . ID E_AUX

    LEFT_PARENTESIS shift and go to state 44
    CONSTANT        shift and go to state 45
    ID              shift and go to state 42

    E                              shift and go to state 43

state 27

    (13) B -> READ ID . SEMICOLON

    SEMICOLON       shift and go to state 46


state 28

    (14) B -> WRITE STRING . WRITE_AUX SEMICOLON
    (22) WRITE_AUX -> . COMA STRING WRITE_AUX
    (23) WRITE_AUX -> . COMA ID WRITE_AUX
    (24) WRITE_AUX -> .

    COMA            shift and go to state 48
    SEMICOLON       reduce using rule 24 (WRITE_AUX -> .)

    WRITE_AUX                      shift and go to state 47

state 29

    (15) B -> WRITE ID . WRITE_AUX SEMICOLON
    (22) WRITE_AUX -> . COMA STRING WRITE_AUX
    (23) WRITE_AUX -> . COMA ID WRITE_AUX
    (24) WRITE_AUX -> .

    COMA            shift and go to state 48
    SEMICOLON       reduce using rule 24 (WRITE_AUX -> .)

    WRITE_AUX                      shift and go to state 49

state 30

    (16) B -> IF LEFT_PARENTESIS . EL RIGHT_PARENTESIS B ELSE_AUX ENDIF
    (25) EL -> . LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX
    (26) EL -> . CONSTANT EL_AUX
    (27) EL -> . ID EL_AUX

    LEFT_PARENTESIS shift and go to state 50
    CONSTANT        shift and go to state 52
    ID              shift and go to state 53

    EL                             shift and go to state 51

state 31

    (17) B -> WHILE LEFT_PARENTESIS . EL RIGHT_PARENTESIS B ENDWHILE
    (25) EL -> . LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX
    (26) EL -> . CONSTANT EL_AUX
    (27) EL -> . ID EL_AUX

    LEFT_PARENTESIS shift and go to state 50
    CONSTANT        shift and go to state 52
    ID              shift and go to state 53

    EL                             shift and go to state 54

state 32

    (18) B -> FOR LEFT_PARENTESIS . EL COMA B RIGHT_PARENTESIS B ENDFOR
    (25) EL -> . LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX
    (26) EL -> . CONSTANT EL_AUX
    (27) EL -> . ID EL_AUX

    LEFT_PARENTESIS shift and go to state 50
    CONSTANT        shift and go to state 52
    ID              shift and go to state 53

    EL                             shift and go to state 55

state 33

    (2) V -> BE VARIABLES SEMICOLON .

    CALL            reduce using rule 2 (V -> BE VARIABLES SEMICOLON .)
    ID              reduce using rule 2 (V -> BE VARIABLES SEMICOLON .)
    READ            reduce using rule 2 (V -> BE VARIABLES SEMICOLON .)
    WRITE           reduce using rule 2 (V -> BE VARIABLES SEMICOLON .)
    IF              reduce using rule 2 (V -> BE VARIABLES SEMICOLON .)
    WHILE           reduce using rule 2 (V -> BE VARIABLES SEMICOLON .)
    FOR             reduce using rule 2 (V -> BE VARIABLES SEMICOLON .)
    FINISH          reduce using rule 2 (V -> BE VARIABLES SEMICOLON .)
    RETURN          reduce using rule 2 (V -> BE VARIABLES SEMICOLON .)


state 34

    (4) VARIABLES -> FLOAT ID .

    SEMICOLON       reduce using rule 4 (VARIABLES -> FLOAT ID .)


state 35

    (5) VARIABLES -> INT ID .

    SEMICOLON       reduce using rule 5 (VARIABLES -> INT ID .)


state 36

    (6) VARIABLES -> VECTOR ID . LEFT_PARENTESIS LENGTH RIGHT_PARENTESIS

    LEFT_PARENTESIS shift and go to state 56


state 37

    (7) VARIABLES -> MATRIX ID . LEFT_PARENTESIS LENGTH COMA LENGTH RIGHT_PARENTESIS

    LEFT_PARENTESIS shift and go to state 57


state 38

    (8) VARIABLES -> CUBE ID . LEFT_PARENTESIS LENGTH COMA LENGTH COMA LENGTH RIGHT_PARENTESIS

    LEFT_PARENTESIS shift and go to state 58


state 39

    (9) R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V . B RETURN
    (11) B -> . CALL ID SEMICOLON
    (12) B -> . ID EQUAL E SEMICOLON
    (13) B -> . READ ID SEMICOLON
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON
    (15) B -> . WRITE ID WRITE_AUX SEMICOLON
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS B ENDWHILE
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS B ENDFOR
    (19) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    RETURN          reduce using rule 19 (B -> .)

    B                              shift and go to state 59

state 40

    (1) PROGRAMA -> R START V B FINISH R .

    $end            reduce using rule 1 (PROGRAMA -> R START V B FINISH R .)


state 41

    (11) B -> CALL ID SEMICOLON .

    FINISH          reduce using rule 11 (B -> CALL ID SEMICOLON .)
    RETURN          reduce using rule 11 (B -> CALL ID SEMICOLON .)
    ELSE            reduce using rule 11 (B -> CALL ID SEMICOLON .)
    ENDIF           reduce using rule 11 (B -> CALL ID SEMICOLON .)
    ENDWHILE        reduce using rule 11 (B -> CALL ID SEMICOLON .)
    RIGHT_PARENTESIS reduce using rule 11 (B -> CALL ID SEMICOLON .)
    ENDFOR          reduce using rule 11 (B -> CALL ID SEMICOLON .)


state 42

    (32) E -> ID . E_AUX
    (33) E_AUX -> . PLUS E
    (34) E_AUX -> . STAR E
    (35) E_AUX -> . SLASH E
    (36) E_AUX -> . MINUS E
    (37) E_AUX -> .

    PLUS            shift and go to state 61
    STAR            shift and go to state 62
    SLASH           shift and go to state 63
    MINUS           shift and go to state 64
    SEMICOLON       reduce using rule 37 (E_AUX -> .)
    RIGHT_PARENTESIS reduce using rule 37 (E_AUX -> .)
    COMA            reduce using rule 37 (E_AUX -> .)

    E_AUX                          shift and go to state 60

state 43

    (12) B -> ID EQUAL E . SEMICOLON

    SEMICOLON       shift and go to state 65


state 44

    (30) E -> LEFT_PARENTESIS . E RIGHT_PARENTESIS E_AUX
    (30) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (31) E -> . CONSTANT E_AUX
    (32) E -> . ID E_AUX

    LEFT_PARENTESIS shift and go to state 44
    CONSTANT        shift and go to state 45
    ID              shift and go to state 42

    E                              shift and go to state 66

state 45

    (31) E -> CONSTANT . E_AUX
    (33) E_AUX -> . PLUS E
    (34) E_AUX -> . STAR E
    (35) E_AUX -> . SLASH E
    (36) E_AUX -> . MINUS E
    (37) E_AUX -> .

    PLUS            shift and go to state 61
    STAR            shift and go to state 62
    SLASH           shift and go to state 63
    MINUS           shift and go to state 64
    SEMICOLON       reduce using rule 37 (E_AUX -> .)
    RIGHT_PARENTESIS reduce using rule 37 (E_AUX -> .)
    COMA            reduce using rule 37 (E_AUX -> .)

    E_AUX                          shift and go to state 67

state 46

    (13) B -> READ ID SEMICOLON .

    FINISH          reduce using rule 13 (B -> READ ID SEMICOLON .)
    RETURN          reduce using rule 13 (B -> READ ID SEMICOLON .)
    ELSE            reduce using rule 13 (B -> READ ID SEMICOLON .)
    ENDIF           reduce using rule 13 (B -> READ ID SEMICOLON .)
    ENDWHILE        reduce using rule 13 (B -> READ ID SEMICOLON .)
    RIGHT_PARENTESIS reduce using rule 13 (B -> READ ID SEMICOLON .)
    ENDFOR          reduce using rule 13 (B -> READ ID SEMICOLON .)


state 47

    (14) B -> WRITE STRING WRITE_AUX . SEMICOLON

    SEMICOLON       shift and go to state 68


state 48

    (22) WRITE_AUX -> COMA . STRING WRITE_AUX
    (23) WRITE_AUX -> COMA . ID WRITE_AUX

    STRING          shift and go to state 69
    ID              shift and go to state 70


state 49

    (15) B -> WRITE ID WRITE_AUX . SEMICOLON

    SEMICOLON       shift and go to state 71


state 50

    (25) EL -> LEFT_PARENTESIS . EL RIGHT_PARENTESIS EL_AUX
    (25) EL -> . LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX
    (26) EL -> . CONSTANT EL_AUX
    (27) EL -> . ID EL_AUX

    LEFT_PARENTESIS shift and go to state 50
    CONSTANT        shift and go to state 52
    ID              shift and go to state 53

    EL                             shift and go to state 72

state 51

    (16) B -> IF LEFT_PARENTESIS EL . RIGHT_PARENTESIS B ELSE_AUX ENDIF

    RIGHT_PARENTESIS shift and go to state 73


state 52

    (26) EL -> CONSTANT . EL_AUX
    (28) EL_AUX -> . COMPARISON E
    (29) EL_AUX -> .

    COMPARISON      shift and go to state 75
    RIGHT_PARENTESIS reduce using rule 29 (EL_AUX -> .)
    COMA            reduce using rule 29 (EL_AUX -> .)

    EL_AUX                         shift and go to state 74

state 53

    (27) EL -> ID . EL_AUX
    (28) EL_AUX -> . COMPARISON E
    (29) EL_AUX -> .

    COMPARISON      shift and go to state 75
    RIGHT_PARENTESIS reduce using rule 29 (EL_AUX -> .)
    COMA            reduce using rule 29 (EL_AUX -> .)

    EL_AUX                         shift and go to state 76

state 54

    (17) B -> WHILE LEFT_PARENTESIS EL . RIGHT_PARENTESIS B ENDWHILE

    RIGHT_PARENTESIS shift and go to state 77


state 55

    (18) B -> FOR LEFT_PARENTESIS EL . COMA B RIGHT_PARENTESIS B ENDFOR

    COMA            shift and go to state 78


state 56

    (6) VARIABLES -> VECTOR ID LEFT_PARENTESIS . LENGTH RIGHT_PARENTESIS

    LENGTH          shift and go to state 79


state 57

    (7) VARIABLES -> MATRIX ID LEFT_PARENTESIS . LENGTH COMA LENGTH RIGHT_PARENTESIS

    LENGTH          shift and go to state 80


state 58

    (8) VARIABLES -> CUBE ID LEFT_PARENTESIS . LENGTH COMA LENGTH COMA LENGTH RIGHT_PARENTESIS

    LENGTH          shift and go to state 81


state 59

    (9) R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B . RETURN

    RETURN          shift and go to state 82


state 60

    (32) E -> ID E_AUX .

    SEMICOLON       reduce using rule 32 (E -> ID E_AUX .)
    RIGHT_PARENTESIS reduce using rule 32 (E -> ID E_AUX .)
    COMA            reduce using rule 32 (E -> ID E_AUX .)


state 61

    (33) E_AUX -> PLUS . E
    (30) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (31) E -> . CONSTANT E_AUX
    (32) E -> . ID E_AUX

    LEFT_PARENTESIS shift and go to state 44
    CONSTANT        shift and go to state 45
    ID              shift and go to state 42

    E                              shift and go to state 83

state 62

    (34) E_AUX -> STAR . E
    (30) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (31) E -> . CONSTANT E_AUX
    (32) E -> . ID E_AUX

    LEFT_PARENTESIS shift and go to state 44
    CONSTANT        shift and go to state 45
    ID              shift and go to state 42

    E                              shift and go to state 84

state 63

    (35) E_AUX -> SLASH . E
    (30) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (31) E -> . CONSTANT E_AUX
    (32) E -> . ID E_AUX

    LEFT_PARENTESIS shift and go to state 44
    CONSTANT        shift and go to state 45
    ID              shift and go to state 42

    E                              shift and go to state 85

state 64

    (36) E_AUX -> MINUS . E
    (30) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (31) E -> . CONSTANT E_AUX
    (32) E -> . ID E_AUX

    LEFT_PARENTESIS shift and go to state 44
    CONSTANT        shift and go to state 45
    ID              shift and go to state 42

    E                              shift and go to state 86

state 65

    (12) B -> ID EQUAL E SEMICOLON .

    FINISH          reduce using rule 12 (B -> ID EQUAL E SEMICOLON .)
    RETURN          reduce using rule 12 (B -> ID EQUAL E SEMICOLON .)
    ELSE            reduce using rule 12 (B -> ID EQUAL E SEMICOLON .)
    ENDIF           reduce using rule 12 (B -> ID EQUAL E SEMICOLON .)
    ENDWHILE        reduce using rule 12 (B -> ID EQUAL E SEMICOLON .)
    RIGHT_PARENTESIS reduce using rule 12 (B -> ID EQUAL E SEMICOLON .)
    ENDFOR          reduce using rule 12 (B -> ID EQUAL E SEMICOLON .)


state 66

    (30) E -> LEFT_PARENTESIS E . RIGHT_PARENTESIS E_AUX

    RIGHT_PARENTESIS shift and go to state 87


state 67

    (31) E -> CONSTANT E_AUX .

    SEMICOLON       reduce using rule 31 (E -> CONSTANT E_AUX .)
    RIGHT_PARENTESIS reduce using rule 31 (E -> CONSTANT E_AUX .)
    COMA            reduce using rule 31 (E -> CONSTANT E_AUX .)


state 68

    (14) B -> WRITE STRING WRITE_AUX SEMICOLON .

    FINISH          reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON .)
    RETURN          reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON .)
    ELSE            reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON .)
    ENDIF           reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON .)
    ENDWHILE        reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON .)
    RIGHT_PARENTESIS reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON .)
    ENDFOR          reduce using rule 14 (B -> WRITE STRING WRITE_AUX SEMICOLON .)


state 69

    (22) WRITE_AUX -> COMA STRING . WRITE_AUX
    (22) WRITE_AUX -> . COMA STRING WRITE_AUX
    (23) WRITE_AUX -> . COMA ID WRITE_AUX
    (24) WRITE_AUX -> .

    COMA            shift and go to state 48
    SEMICOLON       reduce using rule 24 (WRITE_AUX -> .)

    WRITE_AUX                      shift and go to state 88

state 70

    (23) WRITE_AUX -> COMA ID . WRITE_AUX
    (22) WRITE_AUX -> . COMA STRING WRITE_AUX
    (23) WRITE_AUX -> . COMA ID WRITE_AUX
    (24) WRITE_AUX -> .

    COMA            shift and go to state 48
    SEMICOLON       reduce using rule 24 (WRITE_AUX -> .)

    WRITE_AUX                      shift and go to state 89

state 71

    (15) B -> WRITE ID WRITE_AUX SEMICOLON .

    FINISH          reduce using rule 15 (B -> WRITE ID WRITE_AUX SEMICOLON .)
    RETURN          reduce using rule 15 (B -> WRITE ID WRITE_AUX SEMICOLON .)
    ELSE            reduce using rule 15 (B -> WRITE ID WRITE_AUX SEMICOLON .)
    ENDIF           reduce using rule 15 (B -> WRITE ID WRITE_AUX SEMICOLON .)
    ENDWHILE        reduce using rule 15 (B -> WRITE ID WRITE_AUX SEMICOLON .)
    RIGHT_PARENTESIS reduce using rule 15 (B -> WRITE ID WRITE_AUX SEMICOLON .)
    ENDFOR          reduce using rule 15 (B -> WRITE ID WRITE_AUX SEMICOLON .)


state 72

    (25) EL -> LEFT_PARENTESIS EL . RIGHT_PARENTESIS EL_AUX

    RIGHT_PARENTESIS shift and go to state 90


state 73

    (16) B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS . B ELSE_AUX ENDIF
    (11) B -> . CALL ID SEMICOLON
    (12) B -> . ID EQUAL E SEMICOLON
    (13) B -> . READ ID SEMICOLON
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON
    (15) B -> . WRITE ID WRITE_AUX SEMICOLON
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS B ENDWHILE
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS B ENDFOR
    (19) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    ELSE            reduce using rule 19 (B -> .)
    ENDIF           reduce using rule 19 (B -> .)

    B                              shift and go to state 91

state 74

    (26) EL -> CONSTANT EL_AUX .

    RIGHT_PARENTESIS reduce using rule 26 (EL -> CONSTANT EL_AUX .)
    COMA            reduce using rule 26 (EL -> CONSTANT EL_AUX .)


state 75

    (28) EL_AUX -> COMPARISON . E
    (30) E -> . LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX
    (31) E -> . CONSTANT E_AUX
    (32) E -> . ID E_AUX

    LEFT_PARENTESIS shift and go to state 44
    CONSTANT        shift and go to state 45
    ID              shift and go to state 42

    E                              shift and go to state 92

state 76

    (27) EL -> ID EL_AUX .

    RIGHT_PARENTESIS reduce using rule 27 (EL -> ID EL_AUX .)
    COMA            reduce using rule 27 (EL -> ID EL_AUX .)


state 77

    (17) B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS . B ENDWHILE
    (11) B -> . CALL ID SEMICOLON
    (12) B -> . ID EQUAL E SEMICOLON
    (13) B -> . READ ID SEMICOLON
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON
    (15) B -> . WRITE ID WRITE_AUX SEMICOLON
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS B ENDWHILE
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS B ENDFOR
    (19) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    ENDWHILE        reduce using rule 19 (B -> .)

    B                              shift and go to state 93

state 78

    (18) B -> FOR LEFT_PARENTESIS EL COMA . B RIGHT_PARENTESIS B ENDFOR
    (11) B -> . CALL ID SEMICOLON
    (12) B -> . ID EQUAL E SEMICOLON
    (13) B -> . READ ID SEMICOLON
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON
    (15) B -> . WRITE ID WRITE_AUX SEMICOLON
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS B ENDWHILE
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS B ENDFOR
    (19) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    RIGHT_PARENTESIS reduce using rule 19 (B -> .)

    B                              shift and go to state 94

state 79

    (6) VARIABLES -> VECTOR ID LEFT_PARENTESIS LENGTH . RIGHT_PARENTESIS

    RIGHT_PARENTESIS shift and go to state 95


state 80

    (7) VARIABLES -> MATRIX ID LEFT_PARENTESIS LENGTH . COMA LENGTH RIGHT_PARENTESIS

    COMA            shift and go to state 96


state 81

    (8) VARIABLES -> CUBE ID LEFT_PARENTESIS LENGTH . COMA LENGTH COMA LENGTH RIGHT_PARENTESIS

    COMA            shift and go to state 97


state 82

    (9) R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN .

    START           reduce using rule 9 (R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN .)
    $end            reduce using rule 9 (R -> ROUTINE LEFT_PARENTESIS ID RIGHT_PARENTESIS V B RETURN .)


state 83

    (33) E_AUX -> PLUS E .

    SEMICOLON       reduce using rule 33 (E_AUX -> PLUS E .)
    RIGHT_PARENTESIS reduce using rule 33 (E_AUX -> PLUS E .)
    COMA            reduce using rule 33 (E_AUX -> PLUS E .)


state 84

    (34) E_AUX -> STAR E .

    SEMICOLON       reduce using rule 34 (E_AUX -> STAR E .)
    RIGHT_PARENTESIS reduce using rule 34 (E_AUX -> STAR E .)
    COMA            reduce using rule 34 (E_AUX -> STAR E .)


state 85

    (35) E_AUX -> SLASH E .

    SEMICOLON       reduce using rule 35 (E_AUX -> SLASH E .)
    RIGHT_PARENTESIS reduce using rule 35 (E_AUX -> SLASH E .)
    COMA            reduce using rule 35 (E_AUX -> SLASH E .)


state 86

    (36) E_AUX -> MINUS E .

    SEMICOLON       reduce using rule 36 (E_AUX -> MINUS E .)
    RIGHT_PARENTESIS reduce using rule 36 (E_AUX -> MINUS E .)
    COMA            reduce using rule 36 (E_AUX -> MINUS E .)


state 87

    (30) E -> LEFT_PARENTESIS E RIGHT_PARENTESIS . E_AUX
    (33) E_AUX -> . PLUS E
    (34) E_AUX -> . STAR E
    (35) E_AUX -> . SLASH E
    (36) E_AUX -> . MINUS E
    (37) E_AUX -> .

    PLUS            shift and go to state 61
    STAR            shift and go to state 62
    SLASH           shift and go to state 63
    MINUS           shift and go to state 64
    SEMICOLON       reduce using rule 37 (E_AUX -> .)
    RIGHT_PARENTESIS reduce using rule 37 (E_AUX -> .)
    COMA            reduce using rule 37 (E_AUX -> .)

    E_AUX                          shift and go to state 98

state 88

    (22) WRITE_AUX -> COMA STRING WRITE_AUX .

    SEMICOLON       reduce using rule 22 (WRITE_AUX -> COMA STRING WRITE_AUX .)


state 89

    (23) WRITE_AUX -> COMA ID WRITE_AUX .

    SEMICOLON       reduce using rule 23 (WRITE_AUX -> COMA ID WRITE_AUX .)


state 90

    (25) EL -> LEFT_PARENTESIS EL RIGHT_PARENTESIS . EL_AUX
    (28) EL_AUX -> . COMPARISON E
    (29) EL_AUX -> .

    COMPARISON      shift and go to state 75
    RIGHT_PARENTESIS reduce using rule 29 (EL_AUX -> .)
    COMA            reduce using rule 29 (EL_AUX -> .)

    EL_AUX                         shift and go to state 99

state 91

    (16) B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B . ELSE_AUX ENDIF
    (20) ELSE_AUX -> . ELSE B
    (21) ELSE_AUX -> .

    ELSE            shift and go to state 101
    ENDIF           reduce using rule 21 (ELSE_AUX -> .)

    ELSE_AUX                       shift and go to state 100

state 92

    (28) EL_AUX -> COMPARISON E .

    RIGHT_PARENTESIS reduce using rule 28 (EL_AUX -> COMPARISON E .)
    COMA            reduce using rule 28 (EL_AUX -> COMPARISON E .)


state 93

    (17) B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS B . ENDWHILE

    ENDWHILE        shift and go to state 102


state 94

    (18) B -> FOR LEFT_PARENTESIS EL COMA B . RIGHT_PARENTESIS B ENDFOR

    RIGHT_PARENTESIS shift and go to state 103


state 95

    (6) VARIABLES -> VECTOR ID LEFT_PARENTESIS LENGTH RIGHT_PARENTESIS .

    SEMICOLON       reduce using rule 6 (VARIABLES -> VECTOR ID LEFT_PARENTESIS LENGTH RIGHT_PARENTESIS .)


state 96

    (7) VARIABLES -> MATRIX ID LEFT_PARENTESIS LENGTH COMA . LENGTH RIGHT_PARENTESIS

    LENGTH          shift and go to state 104


state 97

    (8) VARIABLES -> CUBE ID LEFT_PARENTESIS LENGTH COMA . LENGTH COMA LENGTH RIGHT_PARENTESIS

    LENGTH          shift and go to state 105


state 98

    (30) E -> LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX .

    SEMICOLON       reduce using rule 30 (E -> LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX .)
    RIGHT_PARENTESIS reduce using rule 30 (E -> LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX .)
    COMA            reduce using rule 30 (E -> LEFT_PARENTESIS E RIGHT_PARENTESIS E_AUX .)


state 99

    (25) EL -> LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX .

    RIGHT_PARENTESIS reduce using rule 25 (EL -> LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX .)
    COMA            reduce using rule 25 (EL -> LEFT_PARENTESIS EL RIGHT_PARENTESIS EL_AUX .)


state 100

    (16) B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX . ENDIF

    ENDIF           shift and go to state 106


state 101

    (20) ELSE_AUX -> ELSE . B
    (11) B -> . CALL ID SEMICOLON
    (12) B -> . ID EQUAL E SEMICOLON
    (13) B -> . READ ID SEMICOLON
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON
    (15) B -> . WRITE ID WRITE_AUX SEMICOLON
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS B ENDWHILE
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS B ENDFOR
    (19) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    ENDIF           reduce using rule 19 (B -> .)

    B                              shift and go to state 107

state 102

    (17) B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS B ENDWHILE .

    FINISH          reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS B ENDWHILE .)
    RETURN          reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS B ENDWHILE .)
    ELSE            reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS B ENDWHILE .)
    ENDIF           reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS B ENDWHILE .)
    ENDWHILE        reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS B ENDWHILE .)
    RIGHT_PARENTESIS reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS B ENDWHILE .)
    ENDFOR          reduce using rule 17 (B -> WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS B ENDWHILE .)


state 103

    (18) B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS . B ENDFOR
    (11) B -> . CALL ID SEMICOLON
    (12) B -> . ID EQUAL E SEMICOLON
    (13) B -> . READ ID SEMICOLON
    (14) B -> . WRITE STRING WRITE_AUX SEMICOLON
    (15) B -> . WRITE ID WRITE_AUX SEMICOLON
    (16) B -> . IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF
    (17) B -> . WHILE LEFT_PARENTESIS EL RIGHT_PARENTESIS B ENDWHILE
    (18) B -> . FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS B ENDFOR
    (19) B -> .

    CALL            shift and go to state 10
    ID              shift and go to state 11
    READ            shift and go to state 12
    WRITE           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    ENDFOR          reduce using rule 19 (B -> .)

    B                              shift and go to state 108

state 104

    (7) VARIABLES -> MATRIX ID LEFT_PARENTESIS LENGTH COMA LENGTH . RIGHT_PARENTESIS

    RIGHT_PARENTESIS shift and go to state 109


state 105

    (8) VARIABLES -> CUBE ID LEFT_PARENTESIS LENGTH COMA LENGTH . COMA LENGTH RIGHT_PARENTESIS

    COMA            shift and go to state 110


state 106

    (16) B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF .

    FINISH          reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF .)
    RETURN          reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF .)
    ELSE            reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF .)
    ENDIF           reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF .)
    ENDWHILE        reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF .)
    RIGHT_PARENTESIS reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF .)
    ENDFOR          reduce using rule 16 (B -> IF LEFT_PARENTESIS EL RIGHT_PARENTESIS B ELSE_AUX ENDIF .)


state 107

    (20) ELSE_AUX -> ELSE B .

    ENDIF           reduce using rule 20 (ELSE_AUX -> ELSE B .)


state 108

    (18) B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS B . ENDFOR

    ENDFOR          shift and go to state 111


state 109

    (7) VARIABLES -> MATRIX ID LEFT_PARENTESIS LENGTH COMA LENGTH RIGHT_PARENTESIS .

    SEMICOLON       reduce using rule 7 (VARIABLES -> MATRIX ID LEFT_PARENTESIS LENGTH COMA LENGTH RIGHT_PARENTESIS .)


state 110

    (8) VARIABLES -> CUBE ID LEFT_PARENTESIS LENGTH COMA LENGTH COMA . LENGTH RIGHT_PARENTESIS

    LENGTH          shift and go to state 112


state 111

    (18) B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS B ENDFOR .

    FINISH          reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS B ENDFOR .)
    RETURN          reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS B ENDFOR .)
    ELSE            reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS B ENDFOR .)
    ENDIF           reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS B ENDFOR .)
    ENDWHILE        reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS B ENDFOR .)
    RIGHT_PARENTESIS reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS B ENDFOR .)
    ENDFOR          reduce using rule 18 (B -> FOR LEFT_PARENTESIS EL COMA B RIGHT_PARENTESIS B ENDFOR .)


state 112

    (8) VARIABLES -> CUBE ID LEFT_PARENTESIS LENGTH COMA LENGTH COMA LENGTH . RIGHT_PARENTESIS

    RIGHT_PARENTESIS shift and go to state 113


state 113

    (8) VARIABLES -> CUBE ID LEFT_PARENTESIS LENGTH COMA LENGTH COMA LENGTH RIGHT_PARENTESIS .

    SEMICOLON       reduce using rule 8 (VARIABLES -> CUBE ID LEFT_PARENTESIS LENGTH COMA LENGTH COMA LENGTH RIGHT_PARENTESIS .)

